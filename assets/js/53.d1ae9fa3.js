(window.webpackJsonp=window.webpackJsonp||[]).push([[53],{268:function(v,_,t){"use strict";t.r(_);var s=t(5),r=Object(s.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h1",{attrs:{id:"浏览器渲染机制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#浏览器渲染机制"}},[v._v("#")]),v._v(" 浏览器渲染机制")]),v._v(" "),t("p",[v._v("本文讲解释Html、css和js代码是如何变成页面的")]),v._v(" "),t("h2",{attrs:{id:"渲染流水线"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#渲染流水线"}},[v._v("#")]),v._v(" 渲染流水线")]),v._v(" "),t("p",[v._v("浏览器的渲染机制很复杂，在渲染模块中通常会被划分为很多子阶段，Html经过这些子阶段，最后输入像素。 这个渲染的处理过程被称为"),t("strong",[v._v("渲染流水线。")])]),v._v(" "),t("p",[v._v("按照渲染时间顺序来划分，子阶段可大致分为一下几个：")]),v._v(" "),t("ul",[t("li",[v._v("构建DOM树")]),v._v(" "),t("li",[v._v("样式计算")]),v._v(" "),t("li",[v._v("布局阶段")]),v._v(" "),t("li",[v._v("分层")]),v._v(" "),t("li",[v._v("绘制")]),v._v(" "),t("li",[v._v("分块")]),v._v(" "),t("li",[v._v("光栅化和合成")])]),v._v(" "),t("p",[v._v("下面我们从每个子阶段的"),t("strong",[v._v("输入、处理过程、输出")]),v._v("来解释每个阶段做的事情。")]),v._v(" "),t("h3",{attrs:{id:"构建dom树"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#构建dom树"}},[v._v("#")]),v._v(" 构建DOM树")]),v._v(" "),t("p",[v._v("浏览器是不能直接理解和试用HTML的，需要讲HTML代码转化成浏览器能理解的“语言”，而浏览器能理解的语言是一种树结构，被称作 "),t("strong",[v._v("DOM树")])]),v._v(" "),t("p",[v._v("构建DOM树的输入内容就是HTML文件，经过HTML解析器的解析，最后输出树状结构的DOM元素。")]),v._v(" "),t("p",[v._v("我们平时控制台查看样式选中某个节点的时候，所查看的就是DOM树中的一个节点。")]),v._v(" "),t("ul",[t("li",[v._v("可以通过js修改DOM的属性，它直接或间接（某些框架）修改DOM树。")])]),v._v(" "),t("h3",{attrs:{id:"样式计算"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#样式计算"}},[v._v("#")]),v._v(" 样式计算")]),v._v(" "),t("p",[v._v("样式计算是为了处理DOM节点中每个元素的具体样式")]),v._v(" "),t("ol",[t("li",[t("p",[t("strong",[v._v("把CSS转换为浏览器能理解的结构")])]),v._v(" "),t("p",[v._v("css样式来源主要来自一下三种：")]),v._v(" "),t("ul",[t("li"),v._v(" "),t("li",[v._v("元素的style属性内嵌的css")]),v._v(" "),t("li",[v._v("通过link引用的外部css文件")])]),v._v(" "),t("p",[v._v("浏览器得到这些css代码后，会执行一个转换操作，把css代码转换为styleSheets。可以在控制台打印 "),t("code",[v._v("document.styleSheets")]),v._v(" ,然后可以看到一个数组对象的结构，这个结构同时具备查询和修改功能，为后面的样式操作提供基础")])]),v._v(" "),t("li",[t("p",[t("strong",[v._v("转换样式表中的属性值，使其标准化")])]),v._v(" "),t("p",[v._v("实际上，css代码中的很多属性值，比如：em、blue、bold，渲染引擎是不易理解的，需要把一些不容易理解的值，转换为标准值。有点像babel把ES6的代码转换成ES5的，让执行器理解“新代码”；")]),v._v(" "),t("p",[v._v("通常标准是把一些属性转换成一个“"),t("strong",[v._v("具体的值")]),v._v("”；")]),v._v(" "),t("p",[v._v("例如： 2em—>32px; blue —>rgb(0, 0, 255); bold —>700;")])]),v._v(" "),t("li",[t("p",[t("strong",[v._v("计算DOM树中每个节点的具体样式")])]),v._v(" "),t("p",[v._v("这里涉及到css的"),t("strong",[v._v("继承规则")]),v._v("和"),t("strong",[v._v("层叠规则。")])]),v._v(" "),t("ul",[t("li",[v._v("继承规则，大致是子元素可以继承来自父元素的 "),t("code",[v._v("font-size")]),v._v(" "),t("code",[v._v("color")]),v._v(" "),t("code",[v._v("font-wehght")]),v._v(" 等。这里不过多探讨。")]),v._v(" "),t("li",[v._v("层叠规则，是指定义了如何合并多个源的属性值算法，也就是css展示的优先级。")])]),v._v(" "),t("p",[v._v("遵循这两种规则，最终计算出DOM节点每个元素的样式，保存在"),t("strong",[v._v("ComputedStyle")]),v._v(" 的结构里。")]),v._v(" "),t("p",[v._v("这个结构可以通过控制台查看，选中某个节点—>点击右侧的Computed。")])])]),v._v(" "),t("h3",{attrs:{id:"分层"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分层"}},[v._v("#")]),v._v(" 分层")]),v._v(" "),t("p",[v._v("有了DOM树，有了各个节点的样式，我们还不能直接去绘制页面。因为浏览器页面存在着"),t("strong",[v._v("分层")]),v._v("的概念。")]),v._v(" "),t("p",[v._v("浏览器页面中存在着复杂的3D变化、页面滚动、浮动、绝对定位、z-indexing做z轴排序等。这些都需要为特定的节点生成专用的图层，最终生成一颗"),t("strong",[v._v("图层树（LayerTree）")]),v._v("。")]),v._v(" "),t("ul",[t("li",[t("p",[t("strong",[v._v("拥有层叠上下文属性的元素会被提升为单独的一层。")])]),v._v(" "),t("p",[v._v("例如： position:fixed、z-index:2、fliter:blue(5px)、opacitty:0.5等，这些属性被称为层叠上下文属性。会按照自身优先级垂直分布在一个二维平面的Z轴上")])]),v._v(" "),t("li",[t("p",[t("strong",[v._v("需要裁剪(clip)的地方也会创建图层")])]),v._v(" "),t("p",[v._v("例如设置一个高度为200px的div，里面的文字很多，于是文字会溢出。")]),v._v(" "),t("p",[v._v("在默认属性中，多出的文字会悬浮在div的下方排列，呈现在单独的图层。")]),v._v(" "),t("p",[v._v("如果出现了滚动条，滚动条也会被提升到单独的图层。")])])]),v._v(" "),t("h3",{attrs:{id:"图层绘制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#图层绘制"}},[v._v("#")]),v._v(" 图层绘制")]),v._v(" "),t("p",[v._v("完成图层的创建之后，渲染引擎会对图层中的每个图层进行绘制。")]),v._v(" "),t("p",[t("strong",[v._v("绘制列表")]),v._v("是用来记录绘制顺序和绘制指令的列表，而实际的绘制操作是由渲染引擎的"),t("strong",[v._v("合成线程")]),v._v("来完成的。")]),v._v(" "),t("p",[v._v("当图层的绘制列表准备好之后，主线程会把绘制列表提交给"),t("strong",[v._v("合成线程")]),v._v("。")]),v._v(" "),t("h3",{attrs:{id:"栅格化-raster-操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#栅格化-raster-操作"}},[v._v("#")]),v._v(" 栅格化（raster)操作")]),v._v(" "),t("p",[v._v("通常的页面可能很大，用户使用只能看到其中的一部分，用户能看到的这部分叫做"),t("strong",[v._v("视口。")])]),v._v(" "),t("p",[v._v("有些像懒加载机制，当用户没有看到视口下方的内容时，去绘制显然是增加了开销的。这个点的优化本质就是始终绘制视口位置所呈现的“页面”。")]),v._v(" "),t("p",[v._v("合成线程会按照视口附近的"),t("strong",[v._v("图块")]),v._v("优先生成"),t("strong",[v._v("位图，"),t("strong",[v._v("生成位图的操作是由")]),v._v("栅格化")]),v._v("来执行的。")]),v._v(" "),t("p",[v._v("栅格化的本质就是"),t("strong",[v._v("图块")]),v._v("转化成"),t("strong",[v._v("位图")]),v._v("，图块是栅格化的最小执行单位。")]),v._v(" "),t("p",[v._v("通常栅格化过程会使用GPU来加速生成，这种方式叫做"),t("strong",[v._v("快速栅格化（GPU栅格化）")]),v._v(" 生成的位图会保存在GPU的内存中。")]),v._v(" "),t("h3",{attrs:{id:"合成和显示"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#合成和显示"}},[v._v("#")]),v._v(" 合成和显示")]),v._v(" "),t("p",[v._v("一旦所有图块都被光栅化，合成线程就会生成一个绘制图块的命令——“DrawQuad”，然后将该命令提交给浏览器进程。")]),v._v(" "),t("p",[v._v("浏览器进程里面有一个叫viz的组件，用来接收合成线程发过来的DrawQuad命令，然后根据DrawQuad命令，将其页面内容绘制到内存中，最后再将内存显示在屏幕上。")]),v._v(" "),t("p",[v._v("到这里，经过这一系列的阶段，编写好的HTML、CSS、JavaScript等文件，经过浏览器就会显示出漂亮的页面了")]),v._v(" "),t("h3",{attrs:{id:"渲染流水线总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#渲染流水线总结"}},[v._v("#")]),v._v(" "),t("strong",[t("strong",[v._v("渲染流水线总结")])])]),v._v(" "),t("p",[v._v("HTML到DOM、样式计算、布局、图层、绘制、光栅化、合成和显示")]),v._v(" "),t("ul",[t("li",[v._v("渲染进程将HTML内容转换为能够读懂的DOM树结构。")]),v._v(" "),t("li",[v._v("渲染引擎将CSS样式表转化为浏览器可以理解的styleSheets，计算出DOM节点的样式。")]),v._v(" "),t("li",[v._v("创建布局树，并计算元素的布局信息。")]),v._v(" "),t("li",[v._v("对布局树进行分层，并生成分层树。")]),v._v(" "),t("li",[v._v("为每个图层生成绘制列表，并将其提交到合成线程。")]),v._v(" "),t("li",[v._v("合成线程将图层分成图块，并在光栅化线程池中将图块转换成位图。")]),v._v(" "),t("li",[v._v("合成线程发送绘制图块命令DrawQuad给浏览器进程。")]),v._v(" "),t("li",[v._v("浏览器进程根据DrawQuad消息生成页面，并显示到显示器上")])])])}),[],!1,null,null,null);_.default=r.exports}}]);