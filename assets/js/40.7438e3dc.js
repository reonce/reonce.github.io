(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{248:function(t,e,s){"use strict";s.r(e);var a=s(5),r=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"_16-2-1-存取元素样式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_16-2-1-存取元素样式"}},[t._v("#")]),t._v(" 16.2.1  存取元素样式")]),t._v(" "),s("p",[t._v("CSS 属性名是使用连字符表示的，例如 "),s("code",[t._v("backgroud-color")]),t._v("，所以在 JS 中必须转换成驼峰大小写形式， 例如 "),s("code",[t._v("backgroundColor")])]),t._v(" "),s("p",[t._v("大多数都会像上面一样转换过来。但是 "),s("code",[t._v("float")]),t._v(" 不行，它是 JS 的保留关键字，需要用 "),s("code",[t._v("cssFloat")]),t._v(" 来表示")]),t._v(" "),s("p",[t._v("通过 JS 设置样式的时候，使用小驼峰形式的属性名就可以直接设置了，例如：")]),t._v(" "),s("div",{staticClass:"language-js' line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("div.style.backgroundColor = 'red'\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("blockquote",[s("p",[t._v("在标准模式下，设置宽高度必须指定为  '20px' 而在混杂模式可以直接设置为 '20'")])]),t._v(" "),s("p",[t._v("Css 的 style 属性也可以用来读，获取相应的值")]),t._v(" "),s("h2",{attrs:{id:"dom-样式属性和方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dom-样式属性和方法"}},[t._v("#")]),t._v(" DOM 样式属性和方法")]),t._v(" "),s("p",[t._v("DOM2 style 规定了一些属性和方法。")]),t._v(" "),s("h3",{attrs:{id:"csstext"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#csstext"}},[t._v("#")]),t._v(" cssText")]),t._v(" "),s("p",[t._v("cssText 属性可以存写样式的 CSS 代码。")]),t._v(" "),s("ul",[s("li",[t._v("当用来读时，cssText 返回 style 属性 CSS 代码在浏览器内部的表示")]),t._v(" "),s("li",[t._v("在用来写时，cssText 赋值会重写 整个 style 属性的值，之前的值都会丢失")])]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("dom"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("style"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cssText\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("blockquote",[s("p",[t._v("设置 cssText 是一次性修改元素多个样式最快捷的方式，因为所有的变化都会同时生效")])]),t._v(" "),s("h3",{attrs:{id:"item"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#item"}},[t._v("#")]),t._v(" item()")]),t._v(" "),s("p",[t._v("使用中括号或者 item(index) 方法都会返回对应索引位置的 CSS 属性名（是连字符格式的，例如'background-color'）")]),t._v(" "),s("h3",{attrs:{id:"getproperyvalue"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#getproperyvalue"}},[t._v("#")]),t._v(" getProperyValue()")]),t._v(" "),s("p",[t._v("根据连字符格式的 CSS属性名，返回 CSS 属性的值（字符串格式)。 例如：")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("dom"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("style"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getProperyValue")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'background-color'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'red'")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("获取更详细的信息，可以用 "),s("code",[t._v("getCssProperyValue()")]),t._v(" 方法，用法相同，返回 cssText 和 cssValueType, 前者与 getProperyValue() 值一样，后者表示值的类型（1 原始值， 2 列表， 3 自定义值）")]),t._v(" "),s("h3",{attrs:{id:"removeproperyvalue"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#removeproperyvalue"}},[t._v("#")]),t._v(" removeProperyValue()")]),t._v(" "),s("p",[t._v("移除元素的某个属性值，之后元素会应用它原来的默认值（继承来的）")]),t._v(" "),s("h2",{attrs:{id:"计算样式-getcomputedstyle"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#计算样式-getcomputedstyle"}},[t._v("#")]),t._v(" 计算样式 getComputedStyle()")]),t._v(" "),s("p",[s("code",[t._v("getComputedStyle()")]),t._v(' 会返回元素的计算样式（我理解是最终呈现的样式），接收两个参数： 要获取的元素对象和伪元素字符串（":after")  如果不需要查询伪元素，第二个参数传 null')]),t._v(" "),s("p",[t._v("例如一个元素既有行内样式，又有样式表中的样式，则会根据 CSS 优先级处理之后，呈现最终的， 这个方法就可以返回最终的属性。")]),t._v(" "),s("p",[t._v("所有浏览器的计算样式都是只读的，不能修改 "),s("code",[t._v("getComputedStyle()")]),t._v(" 返回的对象")])])}),[],!1,null,null,null);e.default=r.exports}}]);