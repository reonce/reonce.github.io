(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{241:function(t,s,a){"use strict";a.r(s);var n=a(5),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("blockquote",[a("p",[t._v("最近读《JS语言精粹》，对于原型链有了新的理解，记录以便复习")])]),t._v(" "),a("p",[t._v("JS的属性有很多时候是通过"),a("strong",[t._v("继承")]),t._v("而来的，当它自身不存在某个属性时，它会逐级查找它的“父对象”（原型对象）的属性，找到便使用。但是由于构造函数的设计，这个继承关系并不是简单的一对一，而是呈一个“三角关系”。举个例子：")]),t._v(" "),a("div",{staticClass:"language-jsx line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-jsx"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 定义一个构造函数，并扩充它的原型")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Mammal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Mammal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("say")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("my name is ")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" people "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Mammal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'reonce'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 继承自Mammal的属性, 可以打印 people.__proto__ 查看构造函数的原型对象（prototype）")]),t._v("\npeople"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// reonce;  ")]),t._v("\npeople"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("say")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// my name is reonce")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这里也可以给 people.__proto__ 赋值一个函数，同样的，它会对构造函数Mammal的原型进行扩充")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这是因为people.__proto__和Mammal.prototype是全等的")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 个人不推荐这种做法，不易维护")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br")])]),a("p",[t._v("以上代码我们简单对 "),a("code",[t._v("__proto__、prototype")]),t._v(" 有了一点了解, "),a("code",[t._v("__proto__")]),t._v(" 是自下而上的，由子对象去查询父对象的属性，它全等于对应构造函数的 "),a("code",[t._v("prototype")]),t._v(" ；也就是说 "),a("code",[t._v("prototype")]),t._v(" 是自上而下的，它是一个函数的"),a("strong",[t._v("原型对象")]),t._v("，它只存在于函数中，因为只有函数才能作为"),a("strong",[t._v("构造函数")]),t._v("  。")]),t._v(" "),a("p",[t._v("接着我们对例子中的关系做一个拆分：")]),t._v(" "),a("ul",[a("li",[t._v("people.__prototype === Mammal.prototype")])]),t._v(" "),a("p",[t._v("悟了，那么为什么没有一个直接指向Mammal的属性呢")]),t._v(" "),a("p",[t._v("有的，这个属性叫做 "),a("code",[t._v("constructor")]),t._v("  它由一个对象直接指向生成它的"),a("strong",[t._v("构造函数")])]),t._v(" "),a("ul",[a("li",[t._v("people.constructor === Mammal")])]),t._v(" "),a("p",[t._v("但是这里要注意，实际上people上是不存在这个指向关系的。之所以它可以指向，是因为它继承了Mammal的原型对象，实际上使用的是"),a("strong",[t._v("父对象")]),t._v("的属性，就像使用父对象的其他属性（例如name）一样，只不过这里换成了constructor而已")]),t._v(" "),a("p",[t._v("实际存在的指向关系是：")]),t._v(" "),a("ul",[a("li",[t._v("Mammal.prototype.constructor === Mammal")])]),t._v(" "),a("p",[t._v("这里你的理解要做一个拆分，把Mammal.prototype当作一个变量去看，这个变量的constructor指向Mammal。")]),t._v(" "),a("p",[t._v("OK，看到这里应该对三者的关系复习的差不多了。")]),t._v(" "),a("p",[t._v("Mammal的constructor指向 Function， 之后在指向对象，最后指向null。")]),t._v(" "),a("p",[t._v("子对象不断查找父对象属性，找到便使用的关系叫做原型链，null即原型链的终点。")]),t._v(" "),a("p",[t._v("也就是"),a("strong",[t._v("对象的继承。")])])])}),[],!1,null,null,null);s.default=e.exports}}]);