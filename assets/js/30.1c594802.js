(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{246:function(s,n,t){"use strict";t.r(n);var a=t(5),e=Object(a.a)({},(function(){var s=this,n=s.$createElement,t=s._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"async-await使用同步方式写异步代码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#async-await使用同步方式写异步代码"}},[s._v("#")]),s._v(" "),t("strong",[t("strong",[s._v("async await使用同步方式写异步代码")])])]),s._v(" "),t("h2",{attrs:{id:"async函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#async函数"}},[s._v("#")]),s._v(" async函数")]),s._v(" "),t("p",[s._v("ES2017 标准引入了 async 函数，使得异步操作变得更加方便。")]),s._v(" "),t("p",[t("strong",[s._v("async 函数是生成器的语法糖，目的是实现以同步的方式写异步代码，相较于promise的链式调用，它更符合人们的线性思维。")])]),s._v(" "),t("p",[s._v("通常通过try catch捕获异常，完全是在写同步代码一样。它的底层是基于promise和Generator 实现的，下面直接介绍Generator。")]),s._v(" "),t("h2",{attrs:{id:"生成器与协程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#生成器与协程"}},[s._v("#")]),s._v(" 生成器与协程")]),s._v(" "),t("div",{staticClass:"language-jsx line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-jsx"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("genDemo")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    console"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('" 开始执行第一段 "')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("yield")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'generator 2'")]),s._v("\n \n    console"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('" 开始执行第二段 "')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("yield")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'generator 2'")]),s._v("\n \n    console"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('" 开始执行第三段 "')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("yield")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'generator 2'")]),s._v("\n \n    console"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('" 执行结束 "')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'generator 2'")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n \nconsole"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'main 0'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" gen "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("genDemo")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nconsole"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("gen"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("next")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("value"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nconsole"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'main 1'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nconsole"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("gen"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("next")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("value"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nconsole"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'main 2'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nconsole"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("gen"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("next")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("value"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nconsole"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'main 3'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nconsole"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("gen"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("next")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("value"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nconsole"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'main 4'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br")])]),t("p",[s._v("根据这段代码，可以看出它与普通函数的区别。它并不是一次性执行完的，而是通过“多段返回”的形式，yield可以理解为”一次返回“，不像普通函数，返回后函数只是暂停，等待外部触发next()后再返回下一个内容。")]),s._v(" "),t("ul",[t("li",[s._v("内部：每遇到yield关键字，js就会将它之后的内容给外部，并暂停执行。")]),s._v(" "),t("li",[s._v("外部：通过next()方法回复函数的执行")])]),s._v(" "),t("p",[t("strong",[s._v("那么，生成器函数是怎么让函数暂停的呢？")])]),s._v(" "),t("p",[s._v("这里是利用了"),t("strong",[s._v("协程")]),s._v("的原理。协程是比线程更小的一个单位，可以粗浅的理解为它是线程上的一个任务，一个线程中可以存在多个协程，但是线程上同时只能执行一个协程。如果正在执行协程A，这时候要启动协程B，就只有先暂停执行协程A，把主线程控制权交给协程B。如果从协程A启动协程B，我们把协程A成为协程B的"),t("strong",[s._v("父协程。")])]),s._v(" "),t("p",[s._v("协程的一大特点是它是完全由程序所控制，这样在切换它时，资源消耗和性能都会更加好。")]),s._v(" "),t("p",[s._v("执行生成器函数时，协程和父协程是在主线程上"),t("strong",[s._v("交互执行")]),s._v("的，而不是并发执行。他们之前的切换是通过yield和next函数配合完成。")]),s._v(" "),t("p",[s._v("当执行next函数时，JS引擎会保存下一个协程的调用栈信息，并返回父协程的调用栈信息。yield便是暂停父协程执行的关键字。两者交互，配合实现了“暂停”。")]),s._v(" "),t("h2",{attrs:{id:"使用生成器函数模拟async"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用生成器函数模拟async"}},[s._v("#")]),s._v(" 使用生成器函数模拟async")]),s._v(" "),t("p",[s._v("下方是一个依次读取两个文件的代码：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('const fs = require("fs");\nconst readFile = function (fileName) {\n  return new Promise(function (resolve, reject) {\n    fs.readFile(fileName, function (error, data) {\n      if (error) return reject(error);\n      resolve(data);\n    });\n  });\n};\nconst gen = function* () {\n  const f1 = yield readFile("/etc/fstab");\n  const f2 = yield readFile("/etc/shells");\n  console.log(f1.toString());\n  console.log(f2.toString());\n};\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br")])]),t("p",[s._v("上面代码的函数"),t("code",[s._v("gen")]),s._v("可以写成"),t("code",[s._v("async")]),s._v("函数，就是下面这样。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('const asyncReadFile = async function () {\n  const f1 = await readFile("/etc/fstab");\n  const f2 = await readFile("/etc/shells");\n  console.log(f1.toString());\n  console.log(f2.toString());\n};\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[s._v("一比较就会发现，"),t("code",[s._v("async")]),s._v("函数就是将 Generator 函数的星号（"),t("code",[s._v("*")]),s._v("）替换成"),t("code",[s._v("async")]),s._v("，将"),t("code",[s._v("yield")]),s._v("替换成"),t("code",[s._v("await")]),s._v("，仅此而已。")]),s._v(" "),t("p",[t("code",[s._v("async")]),s._v("函数对 Generator 函数的改进，体现在以下四点。")]),s._v(" "),t("p",[s._v("（1）内置执行器。")]),s._v(" "),t("p",[s._v("Generator 函数的执行必须靠执行器，所以才有了"),t("code",[s._v("co")]),s._v("模块，而"),t("code",[s._v("async")]),s._v("函数自带执行器。也就是说，"),t("code",[s._v("async")]),s._v("函数的执行，与普通函数一模一样，只要一行。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("asyncReadFile();\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("上面的代码调用了"),t("code",[s._v("asyncReadFile")]),s._v("函数，然后它就会自动执行，输出最后结果。这完全不像 Generator 函数，需要调用"),t("code",[s._v("next")]),s._v("方法，或者用"),t("code",[s._v("co")]),s._v("模块，才能真正执行，得到最后结果。")]),s._v(" "),t("p",[s._v("（2）更好的语义。")]),s._v(" "),t("p",[t("code",[s._v("async")]),s._v("和"),t("code",[s._v("await")]),s._v("，比起星号和"),t("code",[s._v("yield")]),s._v("，语义更清楚了。"),t("code",[s._v("async")]),s._v("表示函数里有异步操作，"),t("code",[s._v("await")]),s._v("表示紧跟在后面的表达式需要等待结果。")]),s._v(" "),t("p",[s._v("（3）更广的适用性。")]),s._v(" "),t("p",[t("code",[s._v("co")]),s._v("模块约定，"),t("code",[s._v("yield")]),s._v("命令后面只能是 Thunk 函数或 Promise 对象，而"),t("code",[s._v("async")]),s._v("函数的"),t("code",[s._v("await")]),s._v("命令后面，可以是 Promise 对象和原始类型的值（数值、字符串和布尔值，但这时会自动转成立即 resolved 的 Promise 对象）。")]),s._v(" "),t("p",[s._v("（4）返回值是 Promise。")]),s._v(" "),t("p",[t("code",[s._v("async")]),s._v("函数的返回值是 Promise 对象，这比 Generator 函数的返回值是 Iterator 对象方便多了。你可以用"),t("code",[s._v("then")]),s._v("方法指定下一步的操作。")]),s._v(" "),t("p",[s._v("进一步说，"),t("code",[s._v("async")]),s._v("函数完全可以看作多个异步操作，包装成的一个 Promise 对象，而"),t("code",[s._v("await")]),s._v("命令就是内部"),t("code",[s._v("then")]),s._v("命令的语法糖。")])])}),[],!1,null,null,null);n.default=e.exports}}]);