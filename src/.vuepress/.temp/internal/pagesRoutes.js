export const pagesRoutes = [
  ["v-8daa1a0e","/",{"y":"h","t":"","i":"home","I":1},["/index.html","/README.md"]],
  ["v-184f4da6","/intro.html",{"d":"2023-02-04T13:15:39.000Z","e":"<h1> 关于</h1>\n<h2> 关于笔者</h2>\n<p>你好，我叫饮东，山西临汾人，本科软工专业毕业，爱好阅读、写作和散步 <br>\n目前是一名普通的前端程序员，从事 React Web端的开发工作<br></p>\n<p>想了解更多笔者的学习经历，可以访问我的 <a href=\"https://github.com/reonce/notes-and-essays\" target=\"_blank\" rel=\"noopener noreferrer\">日更随笔</a></p>\n<h2> 关于博客</h2>\n<p>由于做过迁移，文章的<strong>写作时间</strong>已经凌乱，所幸这个主题的博客可以通过文件夹形式检索文章<br>\n主题名叫做 <code>vuepress-theme-hope</code> （既然免费使用，就免费推广一下~)</p>","r":{"minutes":0.51,"words":152},"y":"a","t":"关于","I":1},["/intro","/intro.md"]],
  ["v-687eeb1a","/posts/CSS/CSS3%E9%83%A8%E5%88%86%E6%96%B0%E7%89%B9%E6%80%A7.html",{"d":"2023-02-04T13:15:39.000Z","e":"<h1> CSS3知识点汇总</h1>\n<h2> CSS3中新特性样式篇</h2>\n<h3> 背景设置</h3>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><pre class=\"language-text\"><code>background-origin：   规定背景图片的定位区域。\n\t☞ padding-box    背景图像相对内边距定位（默认值）\n\t☞ border-box\t 背景图像相对边框定位【以边框左上角为参照进行位置设置】\n\t☞ content-box    背景图像相对内容区域定位【以内容区域左上角为参照进行位置设置】\n\n   备注：\n\t\t默认盒子的背景图片是在盒子的内边距左上角对齐设置。(padding-box)\n\nbackground-clip：  \t 规定背景的绘制区域。\n\t☞ border-box\t 背景被裁切到边框盒子位置 【将背景图片在整个容器中显示】\n\t☞ padding-box\t 背景被裁切到内边距区域【将背景图片在内边距区域（包含内容区域）显示】\n\t☞ content-box\t 背景被裁切到内容区域【将背景图片在内容区域显示】\n\t备注：\n\t\t默认背景的绘制区域是border-box。\n\nbackground-size：     规定背景图片的尺寸。\n\t☞ cover\t\t\t//背景图片按照原来的缩放比，铺满整个容器\n\t☞ contain\t\t//背景图片按照原来的缩放比，完整地显示到容器中(不确定是否铺满屏幕)\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":5.65,"words":1696},"y":"a","t":"CSS3知识点汇总","I":1},["/posts/CSS/CSS3部分新特性.html","/posts/CSS/CSS3%E9%83%A8%E5%88%86%E6%96%B0%E7%89%B9%E6%80%A7","/posts/CSS/CSS3部分新特性.md","/posts/CSS/CSS3%E9%83%A8%E5%88%86%E6%96%B0%E7%89%B9%E6%80%A7.md"]],
  ["v-2ce88be4","/posts/CSS/CSS%E6%96%87%E5%AD%97%E6%8D%A2%E8%A1%8C%E8%AF%AD%E6%B3%95%E6%B1%87%E6%80%BB.html",{"d":"2023-02-04T13:15:39.000Z","e":"<hr>\n<h1> CSS文字换行</h1>\n<p><strong>word-wrap: normal; || word-break: normal;</strong></p>\n<p>当word-wrap或者word-break为normal时，也就是浏览器的默认设置时。</p>\n<p>换行规则是这样的：</p>\n<p><em>情景一：</em>　　当一个单词在行尾不能完整容纳时，会自动将这个单词换到下一行，示例如下。</p>\n<figure><img src=\"https://images2015.cnblogs.com/blog/666306/201508/666306-20150829131640390-213490926.png\" alt=\"img\" tabindex=\"0\" loading=\"lazy\"><figcaption>img</figcaption></figure>","r":{"minutes":1.53,"words":458},"y":"a","t":"CSS文字换行","I":1},["/posts/CSS/CSS文字换行语法汇总.html","/posts/CSS/CSS%E6%96%87%E5%AD%97%E6%8D%A2%E8%A1%8C%E8%AF%AD%E6%B3%95%E6%B1%87%E6%80%BB","/posts/CSS/CSS文字换行语法汇总.md","/posts/CSS/CSS%E6%96%87%E5%AD%97%E6%8D%A2%E8%A1%8C%E8%AF%AD%E6%B3%95%E6%B1%87%E6%80%BB.md"]],
  ["v-2a6ef733","/posts/CSS/requestAnimationFrame%20%E6%B7%B1%E5%BA%A6%E8%A7%A3%E8%AF%BB.html",{"d":"2023-02-04T13:15:39.000Z","e":"<h1> requestAnimationFrame 定时器解读</h1>\n<p><strong><code>window.requestAnimationFrame()</code></strong> 告诉浏览器——你希望执行一个动画，并且要求浏览器在下次重绘之前调用指定的回调函数更新动画。该方法需要传入一个回调函数作为参数，该回调函数会在浏览器下一次重绘之前执行。</p>\n<p>计时器一直是javascript动画的核心技术。而编写动画循环的关键是要知道延迟时间多长合适。一方面，循环间隔必须足够短，这样才能让不同的动画效果显得平滑流畅；另一方面，循环间隔还要足够长，这样才能确保浏览器有能力渲染产生的变化</p>","r":{"minutes":2.96,"words":889},"y":"a","t":"requestAnimationFrame 定时器解读","I":1},["/posts/CSS/requestAnimationFrame 深度解读.html","/posts/CSS/requestAnimationFrame%20%E6%B7%B1%E5%BA%A6%E8%A7%A3%E8%AF%BB","/posts/CSS/requestAnimationFrame 深度解读.md","/posts/CSS/requestAnimationFrame%20%E6%B7%B1%E5%BA%A6%E8%A7%A3%E8%AF%BB.md"]],
  ["v-62e8e475","/posts/CSS/%E5%8A%A8%E7%94%BBRequestAnimations.html",{"d":"2023-02-04T13:15:39.000Z","e":"<h1> 动画RequestAnimationFrame与canvas</h1>\n<p>早期的动画是用<code>setInterval()</code>做的，存在不精确的缺陷。</p>\n<p>现在一般显示器的屏幕刷新率是60Hz，基本上意味着每秒需要重绘60次。很多浏览器会限制重绘频率，不超过显示屏的刷新率，因为超过<strong>刷新率用户也感知不到</strong></p>\n<p>因此实现平滑动画最佳的重回间隔是1000毫秒/60，大约17毫秒。</p>\n<p>无论是<code>setInterval</code>还是<code>setTimeout</code>，由于时间循环机制的存在，它们都是不精确的，再加上早起浏览器的计时器精度很差，基本上是雪上加霜的，现在好很多，现在Chrome大约是4毫秒。</p>","r":{"minutes":1.65,"words":496},"y":"a","t":"动画RequestAnimationFrame与canvas","I":1},["/posts/CSS/动画RequestAnimations.html","/posts/CSS/%E5%8A%A8%E7%94%BBRequestAnimations","/posts/CSS/动画RequestAnimations.md","/posts/CSS/%E5%8A%A8%E7%94%BBRequestAnimations.md"]],
  ["v-ed5b4fbe","/posts/CSS/%E6%9C%AA%E7%9F%A5%E9%AB%98%E5%BA%A6%E5%85%83%E7%B4%A0%EF%BC%8C%E5%9E%82%E7%9B%B4%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD.html",{"d":"2023-02-04T13:15:39.000Z","e":"<h1> 未知高度元素，垂直水平居中</h1>\n<p>除flex外的方法：</p>\n<h2> absolute+transform</h2>\n<div class=\"language-jsx line-numbers-mode\" data-ext=\"jsx\"><pre class=\"language-jsx\"><code><span class=\"token punctuation\">.</span>parent <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">position</span><span class=\"token operator\">:</span> relative<span class=\"token punctuation\">;</span>\n      <span class=\"token literal-property property\">height</span><span class=\"token operator\">:</span> 500px<span class=\"token punctuation\">;</span>\n      <span class=\"token literal-property property\">width</span><span class=\"token operator\">:</span> 500px<span class=\"token punctuation\">;</span>\n      background<span class=\"token operator\">-</span>color<span class=\"token operator\">:</span> #fd0c70<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">.</span>child <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">position</span><span class=\"token operator\">:</span> absolute<span class=\"token punctuation\">;</span>\n      <span class=\"token literal-property property\">left</span><span class=\"token operator\">:</span> <span class=\"token number\">50</span><span class=\"token operator\">%</span><span class=\"token punctuation\">;</span>\n      <span class=\"token literal-property property\">top</span><span class=\"token operator\">:</span> <span class=\"token number\">50</span><span class=\"token operator\">%</span><span class=\"token punctuation\">;</span>\n      <span class=\"token literal-property property\">transform</span><span class=\"token operator\">:</span> <span class=\"token function\">translate</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">50</span><span class=\"token operator\">%</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">50</span><span class=\"token operator\">%</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token literal-property property\">width</span><span class=\"token operator\">:</span> 100px<span class=\"token punctuation\">;</span>\n      <span class=\"token literal-property property\">height</span><span class=\"token operator\">:</span> 100px<span class=\"token punctuation\">;</span>\n      <span class=\"token literal-property property\">background</span><span class=\"token operator\">:</span> blue<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":0.53,"words":160},"y":"a","t":"未知高度元素，垂直水平居中","I":1},["/posts/CSS/未知高度元素，垂直水平居中.html","/posts/CSS/%E6%9C%AA%E7%9F%A5%E9%AB%98%E5%BA%A6%E5%85%83%E7%B4%A0%EF%BC%8C%E5%9E%82%E7%9B%B4%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD","/posts/CSS/未知高度元素，垂直水平居中.md","/posts/CSS/%E6%9C%AA%E7%9F%A5%E9%AB%98%E5%BA%A6%E5%85%83%E7%B4%A0%EF%BC%8C%E5%9E%82%E7%9B%B4%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD.md"]],
  ["v-5eabaff1","/posts/CSS/%E7%B3%BB%E7%BB%9F%E5%AD%97%E4%BD%93%E5%AF%BC%E8%87%B4%E7%9A%84CSS%E9%94%99%E4%BD%8D%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93.html",{"d":"2023-02-04T13:15:39.000Z","e":"<h1> 系统字体导致的CSS错位问题总结</h1>\n<p>开发业务中，实现了一个顶部的字体，设置了和设计图一样的宽度和字体：</p>\n<p>但是拿给设计看之后，他的电脑上是这个样子的：</p>\n<p>纳尼！！？ 经典的我电脑上没问题。 用附近同事的电脑看，都和我的呈现效果一致。</p>\n<p>在核查了屏幕设置，分辨率等都没问题之后，没有头绪，于是跑上楼看测试的电脑，检查，初步怀疑是浏览器版本问题，但是用另外一个浏览器也发现同样的问题。这时候有个细节，设计的电脑上字体和我们的不一样，设计电脑上展示的是<code>PingFang SC</code>字体。原来是字体原因导致的吗，为啥会出现字体不一样的情况呢？</p>","r":{"minutes":2.04,"words":611},"y":"a","t":"系统字体导致的CSS错位问题总结","I":1},["/posts/CSS/系统字体导致的CSS错位问题总结.html","/posts/CSS/%E7%B3%BB%E7%BB%9F%E5%AD%97%E4%BD%93%E5%AF%BC%E8%87%B4%E7%9A%84CSS%E9%94%99%E4%BD%8D%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93","/posts/CSS/系统字体导致的CSS错位问题总结.md","/posts/CSS/%E7%B3%BB%E7%BB%9F%E5%AD%97%E4%BD%93%E5%AF%BC%E8%87%B4%E7%9A%84CSS%E9%94%99%E4%BD%8D%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93.md"]],
  ["v-c5ea9104","/posts/Chore/Bash%E5%AD%A6%E4%B9%A0(%E4%B8%80).html",{"d":"2023-02-04T13:15:39.000Z","e":"<h1> Bash学习（一）</h1>\n<h2> Shell概念</h2>\n<p>Shell的含义是外壳，和内核相对性。比喻内核外的一层，也就是用户和内核交互的界面。</p>\n<p>Shell有很多种类。可以通过 <code>echo $SHELL</code>命令查看系统的默认Shell</p>\n<p>查看当前使用的Shell类型可以通过 <code>echo $0</code>命令查看，或者直接输入一条不存在的命令，查看报错</p>\n<h2> 命令提示符</h2>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><pre class=\"language-bash\"><code><span class=\"token punctuation\">[</span>user@hostname<span class=\"token punctuation\">]</span> $\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div>","r":{"minutes":3.3,"words":990},"y":"a","t":"Bash学习（一）","I":1},["/posts/Chore/Bash学习(一).html","/posts/Chore/Bash%E5%AD%A6%E4%B9%A0(%E4%B8%80)","/posts/Chore/Bash学习(一).md","/posts/Chore/Bash%E5%AD%A6%E4%B9%A0(%E4%B8%80).md"]],
  ["v-20b61768","/posts/Chore/Bash%E5%AD%A6%E4%B9%A0(%E4%BA%8C).html",{"d":"2023-02-04T13:15:39.000Z","e":"<h1> Bash学习(二)</h1>\n<h2> 第三章 Bash的模式扩展</h2>\n<p>Bash当中，存在着许多特殊的符号，来表示特殊的命令,这种符号的使用被称为<strong>模式扩展</strong>，其中用到通配符的部分，被称为<code>通配符扩展</code></p>\n<p>本章主要以了解为主，知道有这些特殊的符号扩展即可，回头使用来翻阅即可。</p>\n<h3> 扩展的开关</h3>\n<p>Bash 允许用户关闭扩展。</p>\n<div class=\"language-bash line-numbers-mode\" data-ext=\"sh\"><pre class=\"language-bash\"><code>$ <span class=\"token builtin class-name\">set</span> <span class=\"token parameter variable\">-o</span> noglob\n<span class=\"token comment\"># 或者</span>\n$ <span class=\"token builtin class-name\">set</span> <span class=\"token parameter variable\">-f</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":3.09,"words":928},"y":"a","t":"Bash学习(二)","I":1},["/posts/Chore/Bash学习(二).html","/posts/Chore/Bash%E5%AD%A6%E4%B9%A0(%E4%BA%8C)","/posts/Chore/Bash学习(二).md","/posts/Chore/Bash%E5%AD%A6%E4%B9%A0(%E4%BA%8C).md"]],
  ["v-68a1d3a7","/posts/Chore/TypeScript%20%E7%B4%A2%E5%BC%95%E7%AD%BE%E5%90%8D%E5%AF%BC%E8%87%B4%E7%9A%84%E6%8A%A5%E9%94%99%E9%97%AE%E9%A2%98.html",{"d":"2023-02-04T13:15:39.000Z","e":"<h1> TypeScript 索引签名导致的报错问题</h1>\n<p>可以用字符串访问 JavaScript 中的对象（TypeScript 中也一样），用来保存对其他对象的引用。</p>\n<p>例如：</p>\n<div class=\"language-typescript line-numbers-mode\" data-ext=\"ts\"><pre class=\"language-typescript\"><code><span class=\"token keyword\">let</span> foo<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nfoo<span class=\"token punctuation\">[</span><span class=\"token string\">'Hello'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'World'</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">[</span><span class=\"token string\">'Hello'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// World</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":5.76,"words":1729},"y":"a","t":"TypeScript 索引签名导致的报错问题","I":1},["/posts/Chore/TypeScript 索引签名导致的报错问题.html","/posts/Chore/TypeScript%20%E7%B4%A2%E5%BC%95%E7%AD%BE%E5%90%8D%E5%AF%BC%E8%87%B4%E7%9A%84%E6%8A%A5%E9%94%99%E9%97%AE%E9%A2%98","/posts/Chore/TypeScript 索引签名导致的报错问题.md","/posts/Chore/TypeScript%20%E7%B4%A2%E5%BC%95%E7%AD%BE%E5%90%8D%E5%AF%BC%E8%87%B4%E7%9A%84%E6%8A%A5%E9%94%99%E9%97%AE%E9%A2%98.md"]],
  ["v-6742941a","/posts/Chore/%E6%B5%85%E8%AF%BB%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F.html",{"d":"2023-02-04T13:15:39.000Z","e":"<h1> 浅读正则表达式</h1>\n<h2> 导读</h2>\n<p>长期以来我对正则表达式的理解是：</p>\n<ol>\n<li>可以百度查到，随用随查</li>\n<li>印象中不难，但是看不懂</li>\n<li>比起其他的知识，它的优先级不高</li>\n</ol>\n<p>但是要系统的学习JS基础，正则我认为是不可少的一环</p>\n<p>本文目的在于能够使用简单的，看懂正常的正则表达式</p>\n<h2> 创建正则表达式</h2>\n<p>ECNAScript 通过RegExp类型支持正则表达式，它在JS中有两种创建方式：</p>\n<ol>\n<li>通过字面量定义，类似于Perl的简洁语法创建</li>\n<li>通过RegExp构建函数创建</li>\n</ol>","r":{"minutes":2.74,"words":822},"y":"a","t":"浅读正则表达式","I":1},["/posts/Chore/浅读正则表达式.html","/posts/Chore/%E6%B5%85%E8%AF%BB%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F","/posts/Chore/浅读正则表达式.md","/posts/Chore/%E6%B5%85%E8%AF%BB%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F.md"]],
  ["v-a67cdd4c","/posts/Chore/%E7%A8%8B%E5%BA%8F%E8%A6%81%E9%9C%80%E8%A6%81%E5%AD%A6%E4%B9%A0%E7%9A%84%E8%BD%AF%E6%8A%80%E8%83%BD.html",{"d":"2023-02-04T13:15:39.000Z","e":"<h1> 程序要要学习的软技能</h1>\n<h2> 什么是软技能</h2>\n<p>软技能可以理解成除专业强相关的技能以外的技能（对于程序员来说，就是计算机专业能力），涉及范围很广，包括人际处事、职业规划、沟通表达、专业态度等等</p>\n<h2> 1. 人际交往能力</h2>\n<p>程序员工作环境较为单一，通常是整天面对冷冰冰的电脑屏幕，相对其他行业需要和人打交道略显不足。但是人际交往能力又是在社会上生存最重要的能力，因此程序员需要设法进行弥补。</p>\n<h4> 1.1 眼里不要只有代码</h4>\n<p>代码只是工作交差的成果，不要把眼光只聚焦在代码本身，程序员的需求都来自于人，所有的沟通也是人。与人打交道是我们的基本职场技能，需要留心去观察学习。</p>","r":{"minutes":8.6,"words":2579},"y":"a","t":"程序要要学习的软技能","I":1},["/posts/Chore/程序要需要学习的软技能.html","/posts/Chore/%E7%A8%8B%E5%BA%8F%E8%A6%81%E9%9C%80%E8%A6%81%E5%AD%A6%E4%B9%A0%E7%9A%84%E8%BD%AF%E6%8A%80%E8%83%BD","/posts/Chore/程序要需要学习的软技能.md","/posts/Chore/%E7%A8%8B%E5%BA%8F%E8%A6%81%E9%9C%80%E8%A6%81%E5%AD%A6%E4%B9%A0%E7%9A%84%E8%BD%AF%E6%8A%80%E8%83%BD.md"]],
  ["v-8b00529c","/posts/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/Vite%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E4%B8%BA%E4%BB%80%E4%B9%88%E9%80%89%E6%8B%A9Rollup%E5%81%9A%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7.html",{"d":"2023-02-04T13:15:39.000Z","e":"<h1> Vite 的技术选型设计</h1>\n<h2> 一、Vite生产环境为什么选择Rollup做构建工具。</h2>\n<p>Vite是一个由原生ESM驱动的Web开发构建工具。在选择构建工具的时候也最好可以选择基于ESM的工具。</p>\n<p>Rollup是基于ES2015的JavaScript打包工具。它将小文件打包成一个大文件或者更复杂的库和应用，打包既可用于浏览器和Node.js使用。 Rollup最显著的地方就是能让打包文件体积很小。相比其他JavaScript打包工具，Rollup总能打出更小，更快的包。因为Rollup基于ES2015模块，比Webpack和Browserify使用的CommonJS模块机制更高效。</p>","r":{"minutes":1.88,"words":564},"y":"a","t":"Vite 的技术选型设计","I":1},["/posts/前端工程化/Vite生产环境为什么选择Rollup做构建工具.html","/posts/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/Vite%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E4%B8%BA%E4%BB%80%E4%B9%88%E9%80%89%E6%8B%A9Rollup%E5%81%9A%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7","/posts/前端工程化/Vite生产环境为什么选择Rollup做构建工具.md","/posts/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/Vite%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E4%B8%BA%E4%BB%80%E4%B9%88%E9%80%89%E6%8B%A9Rollup%E5%81%9A%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7.md"]],
  ["v-db3b8e32","/posts/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/Webpack%E4%BC%98%E7%BC%BA%E7%82%B9.html",{"d":"2023-02-04T13:15:39.000Z","e":"<h1> Webpack优缺点</h1>\n<p>现在前端主流的打包工具主要以 Webpack 为代表，但随着项目规模的发展，构建方面的痛点越来越突出，最大的感受就是<strong>太慢了</strong>，一方面项目冷启动时必须递归打包整个项目的依赖树，另一方面 JavaScript 语言本身(解释执行、单线程执行)的限制，导致构建性能遇到瓶颈。</p>\n<p>在这样的背景下，一些被称为 Bundleless (或者 Unbundled) 的构建工具应运而生，诸如 Snowpack、Vite，其中 Vite 最近在社区的呼声越来越高，GitHub 上的 star 30k+，甚至已经超过 vue3 仓库的 star 数(目前 24.1k)，可见其影响力之大。</p>","r":{"minutes":0.61,"words":184},"y":"a","t":"Webpack优缺点","I":1},["/posts/前端工程化/Webpack优缺点.html","/posts/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/Webpack%E4%BC%98%E7%BC%BA%E7%82%B9","/posts/前端工程化/Webpack优缺点.md","/posts/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/Webpack%E4%BC%98%E7%BC%BA%E7%82%B9.md"]],
  ["v-417f036a","/posts/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/git%20cz%E7%9A%84%E9%85%8D%E7%BD%AE%E5%91%BD%E4%BB%A4.html",{"d":"2023-02-04T13:15:39.000Z","e":"<h1> git cz的配置命令</h1>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><pre class=\"language-text\"><code>npm install -g commitizen；\n\nnpm install -g conventional-changelog-cli；\n\nnpm install -g cz-conventional-changelog；\n\necho '{ \"path\": \"cz-conventional-changelog\" }' &gt; ~/.czrc\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":0.12,"words":36},"y":"a","t":"git cz的配置命令","I":1},["/posts/前端工程化/git cz的配置命令.html","/posts/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/git%20cz%E7%9A%84%E9%85%8D%E7%BD%AE%E5%91%BD%E4%BB%A4","/posts/前端工程化/git cz的配置命令.md","/posts/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/git%20cz%E7%9A%84%E9%85%8D%E7%BD%AE%E5%91%BD%E4%BB%A4.md"]],
  ["v-640f9dee","/posts/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/webpack%E4%B8%AD%E7%9A%84Loader%E5%92%8CPlugin%E5%8C%BA%E5%88%AB.html",{"d":"2023-02-04T13:15:39.000Z","e":"<h1> webpack中的Loader和Plugin区别</h1>\n<h2> Loader</h2>\n<p>Loader：直译为\"加载器\"，主要是解析一些非js文件的，例如：<code>babel-loader</code>、 <code>less-loader</code>、<code>file-loader</code>等\nWebpack将一切文件视为模块，但是webpack原生是只能解析js文件，如果想将其他文件也打包的话，就会用到<code>loader</code>。 所以Loader的作用是让webpack拥有了加载和解析非JavaScript文件的能力。</p>\n<h2> Plugin</h2>","r":{"minutes":0.7,"words":209},"y":"a","t":"webpack中的Loader和Plugin区别","I":1},["/posts/前端工程化/webpack中的Loader和Plugin区别.html","/posts/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/webpack%E4%B8%AD%E7%9A%84Loader%E5%92%8CPlugin%E5%8C%BA%E5%88%AB","/posts/前端工程化/webpack中的Loader和Plugin区别.md","/posts/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/webpack%E4%B8%AD%E7%9A%84Loader%E5%92%8CPlugin%E5%8C%BA%E5%88%AB.md"]],
  ["v-4b7131b0","/posts/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/webpack%E4%BB%8E0%E6%90%AD%E5%BB%BAreact%E9%A1%B9%E7%9B%AE.html",{"d":"2023-02-04T13:15:39.000Z","e":"<h1> webpack从0搭建react项目</h1>\n<p>本教程不会涉及到任何的实现原理，只是 <strong>webpack 的使用</strong>和<strong>第三方库的使用</strong></p>\n<h1> 准备</h1>\n<p>后续补齐相关学习资料</p>\n<p>学习之前，你需要做一些知识的了解：</p>\n<ul>\n<li>node 入门（path模块，命令行）</li>\n<li>前端模块化入门</li>\n<li>webpack 入门</li>\n<li>babel 入门</li>\n<li>正则入门</li>\n</ul>\n<p><strong>请务必保证上述内容都至少了解的情况下，再开始学习本教程</strong></p>","r":{"minutes":15.31,"words":4594},"y":"a","t":"webpack从0搭建react项目","I":1},["/posts/前端工程化/webpack从0搭建react项目.html","/posts/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/webpack%E4%BB%8E0%E6%90%AD%E5%BB%BAreact%E9%A1%B9%E7%9B%AE","/posts/前端工程化/webpack从0搭建react项目.md","/posts/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/webpack%E4%BB%8E0%E6%90%AD%E5%BB%BAreact%E9%A1%B9%E7%9B%AE.md"]],
  ["v-0a3e262b","/posts/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/%E5%89%8D%E7%AB%AF%E8%B7%AF%E7%94%B1%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%A8%A1%E5%BC%8F.html",{"d":"2023-02-04T13:15:39.000Z","e":"<h1> 前端路由的两种模式： hash 模式和 history 模式</h1>\n<p>对于前端来说，hash路由和history路由都可以实现不刷新页面跳转的功能，也就是说都可以用于前后端分离的项目。</p>\n<h2> hash模式</h2>\n<p>这里的 hash 就是指 url 尾巴后的 # 号以及后面的字符。这里的 # 和 css 里的 # 是一个意思。hash 也 称作 锚点，本身是用来做页面定位的，她可以使对应 id 的元素显示在可视区域内。</p>\n<p>由于 hash 值变化不会导致浏览器向服务器发出请求，而且 hash 改变会触发 hashchange 事件，浏览器的进后退也能对其进行控制，所以人们在 html5 的 history 出现前，基本都是使用 hash 来实现前端路由的。</p>","r":{"minutes":3.71,"words":1113},"y":"a","t":"前端路由的两种模式： hash 模式和 history 模式","I":1},["/posts/前端工程化/前端路由的两种模式.html","/posts/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/%E5%89%8D%E7%AB%AF%E8%B7%AF%E7%94%B1%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%A8%A1%E5%BC%8F","/posts/前端工程化/前端路由的两种模式.md","/posts/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/%E5%89%8D%E7%AB%AF%E8%B7%AF%E7%94%B1%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%A8%A1%E5%BC%8F.md"]],
  ["v-73358dfa","/posts/JS%E8%BF%9B%E9%98%B6-%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/Redux%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86.html",{"d":"2023-02-04T13:15:39.000Z","e":"<h1> Redux实现原理</h1>\n<h2> 状态管理器</h2>\n<p>Redux是一个状态管理器，与react不强相关，只是react中使用的多。它也可以应用于其他框架。由React核心开发者Dan开源开发，缺点槽点很多，但这并不妨碍它是目前最流行的react状态管理解决方案。</p>\n<h3> 简单的状态管理实现</h3>\n<p>redux是一个状态管理器，状态指的就是数据，比如计数器中的count。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><pre class=\"language-javascript\"><code><span class=\"token keyword\">let</span> state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":6.9,"words":2069},"y":"a","t":"Redux实现原理","I":1},["/posts/JS进阶-源码阅读/Redux实现原理.html","/posts/JS%E8%BF%9B%E9%98%B6-%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/Redux%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86","/posts/JS进阶-源码阅读/Redux实现原理.md","/posts/JS%E8%BF%9B%E9%98%B6-%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/Redux%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86.md"]],
  ["v-c341ed9c","/posts/React%E7%9B%B8%E5%85%B3%E8%A7%A3%E8%AF%BB/Filber.html",{"d":"2023-02-04T13:15:39.000Z","e":"<h1> Fiber</h1>\n<h4> 回答关键的几个的地方</h4>\n<ol>\n<li>\n<p>递归树改成链表，可中断</p>\n</li>\n<li>\n<p>链表节点有4个关键属性，return父亲，child子节点，sibling兄弟，alternate拷贝</p>\n</li>\n<li>\n<p>DFS，一路到底，再向上遍历兄弟 就这几个就差不多了，基本不会再问了。其他再补充比如react自己实现了reaquestIdleCallback</p>\n</li>\n</ol>\n","r":{"minutes":0.3,"words":90},"y":"a","t":"Fiber","I":1},["/posts/React相关解读/Filber.html","/posts/React%E7%9B%B8%E5%85%B3%E8%A7%A3%E8%AF%BB/Filber","/posts/React相关解读/Filber.md","/posts/React%E7%9B%B8%E5%85%B3%E8%A7%A3%E8%AF%BB/Filber.md"]],
  ["v-1f21b52a","/posts/React%E7%9B%B8%E5%85%B3%E8%A7%A3%E8%AF%BB/React%E5%87%BD%E6%95%B0%E7%BB%84%E4%BB%B6%E4%B8%AD%E4%BD%BF%E7%94%A8%E9%98%B2%E6%8A%96%E8%8A%82%E6%B5%81.html",{"d":"2023-02-04T13:15:39.000Z","e":"<h1> React函数组件中使用防抖节流</h1>\n<h5> 由于react组件变量变化会导致重复渲染的特性，不能直接的使用loadsh的debouce进行防抖。</h5>\n<h3> 解决思路： 使用useCallback保持防抖函数的唯一性，不重复渲染</h3>\n<p>例如：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><pre class=\"language-javascript\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">useDebounce</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn<span class=\"token punctuation\">,</span> delay</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token function\">debounce</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">,</span> delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>counter<span class=\"token punctuation\">,</span> setCounter<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> handleClick <span class=\"token operator\">=</span> <span class=\"token function\">useDebounce</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setCounter</span><span class=\"token punctuation\">(</span>counter <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">padding</span><span class=\"token operator\">:</span> <span class=\"token number\">30</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>Button\n      onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleClick<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&gt;</span>click<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Button<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{</span>counter<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":1.23,"words":369},"y":"a","t":"React函数组件中使用防抖节流","I":1},["/posts/React相关解读/React函数组件中使用防抖节流.html","/posts/React%E7%9B%B8%E5%85%B3%E8%A7%A3%E8%AF%BB/React%E5%87%BD%E6%95%B0%E7%BB%84%E4%BB%B6%E4%B8%AD%E4%BD%BF%E7%94%A8%E9%98%B2%E6%8A%96%E8%8A%82%E6%B5%81","/posts/React相关解读/React函数组件中使用防抖节流.md","/posts/React%E7%9B%B8%E5%85%B3%E8%A7%A3%E8%AF%BB/React%E5%87%BD%E6%95%B0%E7%BB%84%E4%BB%B6%E4%B8%AD%E4%BD%BF%E7%94%A8%E9%98%B2%E6%8A%96%E8%8A%82%E6%B5%81.md"]],
  ["v-2a6b0260","/posts/React%E7%9B%B8%E5%85%B3%E8%A7%A3%E8%AF%BB/input.html",{"d":"2023-02-04T13:15:39.000Z","e":"<h1> 如何防止Input的拼音输入触发onChange</h1>\n<p>需要使用到<input>的两个厲性 compositionstart 和compositionEnd。下面来看看它们的MDN定义。\ncompositionstart：输入法编辑器开始新的输入法合成时触发的事件，例如，当用户使用拼音输入法开始输\n入汉字时，这个事件就会被触发。\ncompositionstart：同理可得，这是输入法合成完成后触发的事件，例如，当用户使用拼音输入法输入完拼\n音选中汉字时，这个事件就会被触发。\n我们可以在输入法合成时设置一个锁 1ock=true;在输入法合成结束时解除这个锁 1ock=fa lse，在锁生效期\n间onChange事件都return掉不触发，在输入法合成结束时再setlnputValue即可。需要注意的是，这么做的话我\n们的＜Input /＞组件必须设置为非受控，否则在拼音时，会因为此时锁生效不触发setlnputValue事件导致输入框\n一直为空，无任何输入。</p>","r":{"minutes":0.87,"words":261},"y":"a","t":"如何防止Input的拼音输入触发onChange","I":1},["/posts/React相关解读/input.html","/posts/React%E7%9B%B8%E5%85%B3%E8%A7%A3%E8%AF%BB/input","/posts/React相关解读/input.md","/posts/React%E7%9B%B8%E5%85%B3%E8%A7%A3%E8%AF%BB/input.md"]],
  ["v-68b2b365","/posts/React%E7%9B%B8%E5%85%B3%E8%A7%A3%E8%AF%BB/%E5%A6%82%E4%BD%95%E9%98%B2%E6%AD%A2Input%E7%9A%84%E6%8B%BC%E9%9F%B3%E8%BE%93%E5%85%A5%E8%A7%A6%E5%8F%91onChange.html",{"d":"2023-02-04T13:15:39.000Z","e":"<h1> 如何防止Input的拼音输入触发onChange</h1>\n<p>需要使用到<input>的两个厲性 compositionstart 和compositionEnd。下面来看看它们的MDN定义。\ncompositionstart：输入法编辑器开始新的输入法合成时触发的事件，例如，当用户使用拼音输入法开始输\n入汉字时，这个事件就会被触发。\ncompositionstart：同理可得，这是输入法合成完成后触发的事件，例如，当用户使用拼音输入法输入完拼\n音选中汉字时，这个事件就会被触发。\n我们可以在输入法合成时设置一个锁 lock=true;在输入法合成结束时解除这个锁 lock=false，在锁生效期\n间onChange事件都return掉不触发，在输入法合成结束时再setlnputValue即可。需要注意的是，这么做的话我\n们的＜Input /＞组件必须设置为非受控，否则在拼音时，会因为此时锁生效不触发setlnputValue事件导致输入框\n一直为空，无任何输入。</p>","r":{"minutes":1.14,"words":342},"y":"a","t":"如何防止Input的拼音输入触发onChange","I":1},["/posts/React相关解读/如何防止Input的拼音输入触发onChange.html","/posts/React%E7%9B%B8%E5%85%B3%E8%A7%A3%E8%AF%BB/%E5%A6%82%E4%BD%95%E9%98%B2%E6%AD%A2Input%E7%9A%84%E6%8B%BC%E9%9F%B3%E8%BE%93%E5%85%A5%E8%A7%A6%E5%8F%91onChange","/posts/React相关解读/如何防止Input的拼音输入触发onChange.md","/posts/React%E7%9B%B8%E5%85%B3%E8%A7%A3%E8%AF%BB/%E5%A6%82%E4%BD%95%E9%98%B2%E6%AD%A2Input%E7%9A%84%E6%8B%BC%E9%9F%B3%E8%BE%93%E5%85%A5%E8%A7%A6%E5%8F%91onChange.md"]],
  ["v-ce6345e0","/posts/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/%E4%BD%A0%E5%A6%82%E4%BD%95%E5%AF%B9%E7%BD%91%E7%AB%99%E7%9A%84%E6%96%87%E4%BB%B6%E5%92%8C%E8%B5%84%E6%BA%90%E8%BF%9B%E8%A1%8C%E4%BC%98%E5%8C%96%E7%9A%84%202979065a206a4a3d8c82ff7b672cab0c.html",{"d":"2023-02-04T13:15:39.000Z","e":"<h1> 你如何对网站的文件和资源进行优化的</h1>\n<p>链接：</p>\n<p><a href=\"https://www.nowcoder.com/questionTerminal/89089a6c27fb4749bf73b25c347a2051\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.nowcoder.com/questionTerminal/89089a6c27fb4749bf73b25c347a2051</a></p>\n<ol>\n<li>尽可能减少http请求次数，将css, js, 图片各自合并</li>\n<li>使用CDN，降低通信距离</li>\n<li>添加Expire/Cache-Control头</li>\n<li>启用Gzip压缩文件</li>\n<li>将css放在页面最上面</li>\n<li>将script放在页面最下面</li>\n<li>避免在css中使用表达式</li>\n<li>将css, js都放在外部文件中</li>\n<li>减少DNS查询</li>\n<li>最小化css, js，减小文件体积</li>\n<li>避免重定向</li>\n<li>移除重复脚本</li>\n<li>配置实体标签ETag</li>\n</ol>","r":{"minutes":0.51,"words":154},"y":"a","t":"你如何对网站的文件和资源进行优化的","I":1},["/posts/性能优化/你如何对网站的文件和资源进行优化的 2979065a206a4a3d8c82ff7b672cab0c.html","/posts/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/%E4%BD%A0%E5%A6%82%E4%BD%95%E5%AF%B9%E7%BD%91%E7%AB%99%E7%9A%84%E6%96%87%E4%BB%B6%E5%92%8C%E8%B5%84%E6%BA%90%E8%BF%9B%E8%A1%8C%E4%BC%98%E5%8C%96%E7%9A%84%202979065a206a4a3d8c82ff7b672cab0c","/posts/性能优化/你如何对网站的文件和资源进行优化的 2979065a206a4a3d8c82ff7b672cab0c.md","/posts/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/%E4%BD%A0%E5%A6%82%E4%BD%95%E5%AF%B9%E7%BD%91%E7%AB%99%E7%9A%84%E6%96%87%E4%BB%B6%E5%92%8C%E8%B5%84%E6%BA%90%E8%BF%9B%E8%A1%8C%E4%BC%98%E5%8C%96%E7%9A%84%202979065a206a4a3d8c82ff7b672cab0c.md"]],
  ["v-61c606ba","/posts/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/%E8%99%9A%E6%8B%9F%E5%88%97%E8%A1%A8.html",{"d":"2023-02-04T13:15:39.000Z","e":"<h1> 虚拟列表原理解析</h1>\n<h2> 前言</h2>\n<h3> 虚拟列表介绍</h3>\n<p>​\t<strong>虚拟列表</strong>是解决<strong>大数据量渲染</strong>列表的一种方案。原理简述就是只渲染当前视口内的列表项。初次接触容易联想到浏览器的栅格化（raster），但是实现原理和类似于懒加载的栅格化不同，它始终只渲染当前视口的内容，而不是即将看到哪，就增加那块部分的渲染。</p>\n<p>通常，解决<strong>大数据量渲染</strong>问题有两种方案，一种是采用时间分片，另一种就是本文要谈的虚拟列表。在正文开始前，不妨简单了解一下第一种方案，<strong>时间分片</strong>。</p>","r":{"minutes":7.96,"words":2387},"y":"a","t":"虚拟列表原理解析","I":1},["/posts/性能优化/虚拟列表.html","/posts/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/%E8%99%9A%E6%8B%9F%E5%88%97%E8%A1%A8","/posts/性能优化/虚拟列表.md","/posts/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/%E8%99%9A%E6%8B%9F%E5%88%97%E8%A1%A8.md"]],
  ["v-0b88481a","/posts/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/%E8%AF%B7%E8%AF%B4%E5%87%BA%E4%B8%89%E7%A7%8D%E5%87%8F%E5%B0%91%E9%A1%B5%E9%9D%A2%E5%8A%A0%E8%BD%BD%E6%97%B6%E9%97%B4%E7%9A%84%E6%96%B9%E6%B3%95%E3%80%82%204f65bc03f263461bb0a38a4ef0dd8c48.html",{"d":"2023-02-04T13:15:39.000Z","e":"<h1> 请说出三种减少页面加载时间的方法。</h1>\n<p>1.减少HTTP请求；</p>\n<p>2.合并压缩Js/css文件；</p>\n<p>3.使用缓存manifest；</p>\n<p>4.服务器端开启gzip；</p>\n<p>5.使用CDN，用户可以就近获取所需要的资源，访问速度有保障，稳定性也有保障</p>\n<p>6.外部JS和CSS放底下</p>\n<p>7.尽可能少的操作DOM，某些需要重复操作的DOM可以放变量里</p>\n","r":{"minutes":0.37,"words":111},"y":"a","t":"请说出三种减少页面加载时间的方法。","I":1},["/posts/性能优化/请说出三种减少页面加载时间的方法。 4f65bc03f263461bb0a38a4ef0dd8c48.html","/posts/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/%E8%AF%B7%E8%AF%B4%E5%87%BA%E4%B8%89%E7%A7%8D%E5%87%8F%E5%B0%91%E9%A1%B5%E9%9D%A2%E5%8A%A0%E8%BD%BD%E6%97%B6%E9%97%B4%E7%9A%84%E6%96%B9%E6%B3%95%E3%80%82%204f65bc03f263461bb0a38a4ef0dd8c48","/posts/性能优化/请说出三种减少页面加载时间的方法。 4f65bc03f263461bb0a38a4ef0dd8c48.md","/posts/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/%E8%AF%B7%E8%AF%B4%E5%87%BA%E4%B8%89%E7%A7%8D%E5%87%8F%E5%B0%91%E9%A1%B5%E9%9D%A2%E5%8A%A0%E8%BD%BD%E6%97%B6%E9%97%B4%E7%9A%84%E6%96%B9%E6%B3%95%E3%80%82%204f65bc03f263461bb0a38a4ef0dd8c48.md"]],
  ["v-102063fb","/posts/%E6%84%9F%E6%82%9F/%E5%BA%94%E8%AF%A5%E6%8A%8A%E7%B2%BE%E5%8A%9B%E6%8A%95%E5%85%A5%E5%88%B0%E5%93%AA%E4%BA%9B%E4%BA%8B%E6%83%85%E4%B8%8A.html",{"d":"2023-02-04T13:15:39.000Z","e":"<h1> 应该把精力投入到哪些事情上</h1>\n<p>尽管我的个人理念是偏享受型的，基本认同人生苦短，及时行乐。但是很多时候为了短期的行乐影响到未来更加长久的行乐，这是不健康的。</p>\n<p>同级的同学已经通过接私活+炒股的方式买房了，甚至在尝试创业开公司。</p>\n<p>而我在为买一台macbook纠结许久。不知不觉中人与人的差距就拉开了，我一直不擅与人交往，在实习的公司也没有留下比较好的印象，以至于那家公司现在有外包项目或是维护项目都是找其他人。接熟人私活这条途径基本上走不通。炒股基金我也一窍不通，并且买了就想一直看，没有一个成熟的心态去观察。那么我安慰自己在准备知识进大厂，实际上准备进度很迟缓，看上去是学到了很多，但是随意对比一个面经就能感受到自己离大厂的距离。</p>","r":{"minutes":1.18,"words":353},"y":"a","t":"应该把精力投入到哪些事情上","I":1},["/posts/感悟/应该把精力投入到哪些事情上.html","/posts/%E6%84%9F%E6%82%9F/%E5%BA%94%E8%AF%A5%E6%8A%8A%E7%B2%BE%E5%8A%9B%E6%8A%95%E5%85%A5%E5%88%B0%E5%93%AA%E4%BA%9B%E4%BA%8B%E6%83%85%E4%B8%8A","/posts/感悟/应该把精力投入到哪些事情上.md","/posts/%E6%84%9F%E6%82%9F/%E5%BA%94%E8%AF%A5%E6%8A%8A%E7%B2%BE%E5%8A%9B%E6%8A%95%E5%85%A5%E5%88%B0%E5%93%AA%E4%BA%9B%E4%BA%8B%E6%83%85%E4%B8%8A.md"]],
  ["v-5bd6fcb6","/posts/%E6%84%9F%E6%82%9F/%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86.html",{"d":"2023-02-04T13:15:39.000Z","e":"<h1> 时间管理</h1>\n<h2> 认清现状</h2>\n<ul>\n<li>技术提升</li>\n</ul>\n<p>现在个人的提高是很有限的，几乎是在工作中提高，偶尔从技术文章、视频中提高。</p>\n<ol>\n<li>在工作中遇到一些复杂的业务，解除一些业务难点，解决的过程中得到了提升。</li>\n<li>偶尔得闲去看一些技术文章、面经等，通过文章思想学到一些知识。</li>\n<li>极其偶尔看一些视频提升，例如之前补node基础看过一些。</li>\n</ol>\n<ul>\n<li>娱乐休息</li>\n</ul>\n<p>娱乐玩耍占用了很多得空闲时间，通常连续块时间打游戏居多、碎片时间看视频居多。</p>","r":{"minutes":4.46,"words":1337},"y":"a","t":"时间管理","I":1},["/posts/感悟/时间管理.html","/posts/%E6%84%9F%E6%82%9F/%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86","/posts/感悟/时间管理.md","/posts/%E6%84%9F%E6%82%9F/%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86.md"]],
  ["v-21de64b9","/posts/%E6%84%9F%E6%82%9F/%E6%9B%BC%E5%B7%B4%E5%AD%A6%E4%B9%A0%E6%B3%95.html",{"d":"2023-02-04T13:15:39.000Z","e":"<h1> 费曼学习法是什么</h1>\n<h2> 概念</h2>\n<p>费曼学习法被誉为世界上最好的学习方法，是一种顶级的思维模式，值得了解。</p>\n<p>费曼学习法可以分为五个步骤：</p>\n<ol>\n<li>确立学习目标</li>\n<li>理解学习的知识</li>\n<li>进行知识的输出，复述学习的成果</li>\n<li>再次学习，纠正错误，加深印象</li>\n<li>归纳总结，化繁为简</li>\n</ol>\n<p>通过这五个步骤，可以很容易获得最高的内存留存率，加强学习的效果，达成学习目标。</p>\n<h2> 学习的目的是输出</h2>\n<p>曼巴学习法是对”学习本质“的回归。学习的目的就是要使用，如果学了不用，大脑会产生本能的抗拒，认为是做”无用功“。</p>","r":{"minutes":1.44,"words":432},"y":"a","t":"费曼学习法是什么","I":1},["/posts/感悟/曼巴学习法.html","/posts/%E6%84%9F%E6%82%9F/%E6%9B%BC%E5%B7%B4%E5%AD%A6%E4%B9%A0%E6%B3%95","/posts/感悟/曼巴学习法.md","/posts/%E6%84%9F%E6%82%9F/%E6%9B%BC%E5%B7%B4%E5%AD%A6%E4%B9%A0%E6%B3%95.md"]],
  ["v-024a88b8","/posts/%E6%84%9F%E6%82%9F/%E6%AF%8F%E5%BD%93%E6%83%B3%E6%94%BE%E5%BC%83%E8%BF%9B%E5%85%A5%E8%88%92%E9%80%82%E5%9C%88%E7%9A%84%E6%97%B6%E5%80%99.html",{"d":"2023-02-04T13:15:39.000Z","e":"<h1> 每当想放弃进入舒适圈的时候</h1>\n<p>7.22 大雨</p>\n<p>今天我终于交付了 “婚姻预测”的H5外包项目。前两天我经常修改bug到晚上12点，上完正常班回家继续写代码改bug的酸爽。</p>\n<p>尽管这个项目对我的提高有帮助，包括css动画、移动端的一些适配等。但是我认为我付出的时间精力已经超过了合计1.3k的报价。再加上甲方对产品的要求以及自己水平原因，使我感到很疲惫。</p>\n<p>今天终于解放了，特别想躺着休息一下。转念一想，我的日常其实也应该保持这个工作的状态，目前对进大厂的准备已经有些拉下了。自己明显已经感觉到准备的不足，感觉自己还没准备好。但是原计划八月初就应该开始投递简历了。没办法，只有逼自己一把继续努力，无论如何，要按照自己的计划去尝试。哪怕今年进不了大厂，也要去尝试一下，纠正自己努力的方向。</p>","r":{"minutes":0.98,"words":295},"y":"a","t":"每当想放弃进入舒适圈的时候","I":1},["/posts/感悟/每当想放弃进入舒适圈的时候.html","/posts/%E6%84%9F%E6%82%9F/%E6%AF%8F%E5%BD%93%E6%83%B3%E6%94%BE%E5%BC%83%E8%BF%9B%E5%85%A5%E8%88%92%E9%80%82%E5%9C%88%E7%9A%84%E6%97%B6%E5%80%99","/posts/感悟/每当想放弃进入舒适圈的时候.md","/posts/%E6%84%9F%E6%82%9F/%E6%AF%8F%E5%BD%93%E6%83%B3%E6%94%BE%E5%BC%83%E8%BF%9B%E5%85%A5%E8%88%92%E9%80%82%E5%9C%88%E7%9A%84%E6%97%B6%E5%80%99.md"]],
  ["v-5a97986f","/posts/%E6%84%9F%E6%82%9F/%E7%BA%A0%E7%BB%93%E6%97%B6%E5%BA%94%E8%AF%A5%E5%A6%82%E4%BD%95%E6%8A%89%E6%8B%A9.html",{"d":"2023-02-04T13:15:39.000Z","e":"<h1> 购物纠结时应该如何抉择</h1>\n<blockquote>\n<p>金星曾经看上了一个名贵的限量款包，高昂的售价使她十分纠结，于是她打电话给她的丈夫汉斯商量。</p>\n<p>汉斯给的建议是： <strong>如果你喜欢它，就买；如果你需要它，就不买。</strong></p>\n<p>于是金星果断买下了那个包包。</p>\n</blockquote>\n<h2> 我的购物纠结思考</h2>\n<p>参加工作后，手头也逐渐宽裕起来，有了自己可支配的资金，在工作压力和重复劳作的影响下，经常会有\"想买点啥\"的想法。</p>\n<p>以我个人的部分数码购物经历举例： 买完手机买耳机(airpots2)，买了耳机又觉得做地铁听不到声 买降噪耳机（airpots pro)，买完 降噪耳机 又想换个苹果电脑，至此我的苹果全家桶除了手表已经齐了...</p>","r":{"minutes":3.32,"words":997},"y":"a","t":"购物纠结时应该如何抉择","I":1},["/posts/感悟/纠结时应该如何抉择.html","/posts/%E6%84%9F%E6%82%9F/%E7%BA%A0%E7%BB%93%E6%97%B6%E5%BA%94%E8%AF%A5%E5%A6%82%E4%BD%95%E6%8A%89%E6%8B%A9","/posts/感悟/纠结时应该如何抉择.md","/posts/%E6%84%9F%E6%82%9F/%E7%BA%A0%E7%BB%93%E6%97%B6%E5%BA%94%E8%AF%A5%E5%A6%82%E4%BD%95%E6%8A%89%E6%8B%A9.md"]],
  ["v-31fe5478","/posts/%E6%84%9F%E6%82%9F/%E7%BC%96%E5%86%99%E4%BB%A3%E7%A0%81%E7%9A%84%E5%93%AA%E4%BA%9B%E6%96%B9%E9%9D%A2%E8%83%BD%E5%A4%9F%E4%BD%BF%E4%BD%A0%E5%85%B4%E5%A5%8B%E6%88%96%E6%84%9F%E5%85%B4%E8%B6%A3%EF%BC%9F%203297254ce03d4138993062f560433d03.html",{"d":"2023-02-04T13:15:39.000Z","e":"<h1> 编写代码的哪些方面能够使你兴奋或感兴趣？</h1>\n<p>最让我感兴趣的通常是自我驱动的去写一些代码。</p>\n<p>但是传统的自我驱动带有盲目性，你的目的是不够明确的，常常也伴随着变化性。在这不确定性的变化中，兴趣很容易被消磨。</p>\n<p>我最近在空余时间接手了一个H5应用的外包，里面有一些动效和动画，因为要考虑移动端适配和safari浏览器可恶的渲染机制，我需要对动画做适配调整，不断的重构，不断的学习。</p>\n<p>从css动画到js动画再回到css动画最终完美呈现的一个过程，让我非常的兴奋和有成就感。</p>\n","r":{"minutes":0.67,"words":200},"y":"a","t":"编写代码的哪些方面能够使你兴奋或感兴趣？","I":1},["/posts/感悟/编写代码的哪些方面能够使你兴奋或感兴趣？ 3297254ce03d4138993062f560433d03.html","/posts/%E6%84%9F%E6%82%9F/%E7%BC%96%E5%86%99%E4%BB%A3%E7%A0%81%E7%9A%84%E5%93%AA%E4%BA%9B%E6%96%B9%E9%9D%A2%E8%83%BD%E5%A4%9F%E4%BD%BF%E4%BD%A0%E5%85%B4%E5%A5%8B%E6%88%96%E6%84%9F%E5%85%B4%E8%B6%A3%EF%BC%9F%203297254ce03d4138993062f560433d03","/posts/感悟/编写代码的哪些方面能够使你兴奋或感兴趣？ 3297254ce03d4138993062f560433d03.md","/posts/%E6%84%9F%E6%82%9F/%E7%BC%96%E5%86%99%E4%BB%A3%E7%A0%81%E7%9A%84%E5%93%AA%E4%BA%9B%E6%96%B9%E9%9D%A2%E8%83%BD%E5%A4%9F%E4%BD%BF%E4%BD%A0%E5%85%B4%E5%A5%8B%E6%88%96%E6%84%9F%E5%85%B4%E8%B6%A3%EF%BC%9F%203297254ce03d4138993062f560433d03.md"]],
  ["v-1fc1e26c","/posts/%E6%84%9F%E6%82%9F/%E9%80%89%E6%8B%A9%E5%A4%A7%E4%BA%8E%E5%8A%AA%E5%8A%9B.html",{"d":"2023-02-04T13:15:39.000Z","e":"<h1> 选择比努力重要</h1>\n<blockquote>\n<p>这是一篇鸡汤文章，由于22年的互联网行情，各大厂都在裁员，令人在准备阶段容易泄气。</p>\n</blockquote>\n<p>方向比选择重要，选择比努力重要。</p>\n<p>想清楚自己想要什么，就必须做出选择。</p>\n<p>有一个事情是肯定的，在这家公司我得不到我想要的东西。</p>\n<p>准备改变，进行改变，改变。</p>\n<p>从结果进行导向，那就是我一定要完成这件事，这样有时候会在泄气的时候说服自己，恢复勇气。</p>\n<p>2022.5.31</p>\n","r":{"minutes":0.49,"words":147},"y":"a","t":"选择比努力重要","I":1},["/posts/感悟/选择大于努力.html","/posts/%E6%84%9F%E6%82%9F/%E9%80%89%E6%8B%A9%E5%A4%A7%E4%BA%8E%E5%8A%AA%E5%8A%9B","/posts/感悟/选择大于努力.md","/posts/%E6%84%9F%E6%82%9F/%E9%80%89%E6%8B%A9%E5%A4%A7%E4%BA%8E%E5%8A%AA%E5%8A%9B.md"]],
  ["v-1b49a928","/posts/%E6%84%9F%E6%82%9F/%E9%80%89%E6%8B%A9%E6%AF%94%E5%8A%AA%E5%8A%9B%E9%87%8D%E8%A6%81.html",{"d":"2023-02-04T13:15:39.000Z","e":"<h1> 选择比努力重要</h1>\n<blockquote>\n<p>这是一篇鸡汤文章，由于22年的互联网行情，各大厂都在裁员，令人在准备阶段容易泄气。</p>\n</blockquote>\n<p>方向比选择重要，选择比努力重要。</p>\n<p>想清楚自己想要什么，就必须做出选择。</p>\n<p>有一个事情是肯定的，在这家公司我得不到我想要的东西。</p>\n<p>准备改变，进行改变，改变。</p>\n<p>从结果进行导向，那就是我一定要完成这件事，这样有时候会在泄气的时候说服自己，恢复勇气。</p>\n<p>2022.5.31</p>\n","r":{"minutes":0.49,"words":147},"y":"a","t":"选择比努力重要","I":1},["/posts/感悟/选择比努力重要.html","/posts/%E6%84%9F%E6%82%9F/%E9%80%89%E6%8B%A9%E6%AF%94%E5%8A%AA%E5%8A%9B%E9%87%8D%E8%A6%81","/posts/感悟/选择比努力重要.md","/posts/%E6%84%9F%E6%82%9F/%E9%80%89%E6%8B%A9%E6%AF%94%E5%8A%AA%E5%8A%9B%E9%87%8D%E8%A6%81.md"]],
  ["v-71031c10","/posts/%E6%84%9F%E6%82%9F/%E9%A2%84%E4%BC%B0%E4%B8%9A%E5%8A%A1%E9%94%99%E8%AF%AF%E5%BC%95%E5%8F%91%E7%9A%84%E6%80%9D%E8%80%83.html",{"d":"2023-02-04T13:15:39.000Z","e":"<h1> 预估业务错误引发的思考</h1>\n<h2> 需求背景</h2>\n<p>一个树形多选组件，当子节点全部选中的时候，只传父节点的值，否则传子节点</p>\n<h2> 错误判断</h2>\n<p>因为在ng-zorro中，这个逻辑是默认的，于是我很爽快的答应了后端这样做。但是在antd react版本中，子节点全选中会把所有子节点和父节点都传出，和需求商讨的方案是不同的，于是我需要自己实现。</p>\n<h2> 技术实现分析</h2>\n<p>在选中或取消某个节点时，可以拿到当前节点的树结构和对应关系。</p>\n<ol>\n<li>\n<p>当节点作为父节点时，很容易去判断去掉它的子节点。</p>\n</li>\n<li>\n<p>当节点作为子节点时，<strong>难点</strong>来了，需要判断它的兄弟节点及它兄弟节点的全部子节点是否全部选中，然后如果全中，在用当前节点的父节点走作为父节点的逻辑还要再走作为子节点的逻辑</p>\n</li>\n</ol>","r":{"minutes":1.5,"words":449},"y":"a","t":"预估业务错误引发的思考","I":1},["/posts/感悟/预估业务错误引发的思考.html","/posts/%E6%84%9F%E6%82%9F/%E9%A2%84%E4%BC%B0%E4%B8%9A%E5%8A%A1%E9%94%99%E8%AF%AF%E5%BC%95%E5%8F%91%E7%9A%84%E6%80%9D%E8%80%83","/posts/感悟/预估业务错误引发的思考.md","/posts/%E6%84%9F%E6%82%9F/%E9%A2%84%E4%BC%B0%E4%B8%9A%E5%8A%A1%E9%94%99%E8%AF%AF%E5%BC%95%E5%8F%91%E7%9A%84%E6%80%9D%E8%80%83.md"]],
  ["v-37a57d9f","/posts/%E6%89%8B%E5%86%99%E7%AE%97%E6%B3%95%E7%B3%BB%E5%88%97/ES5%E5%AE%9E%E7%8E%B0let%E4%B8%8Econst%203f9f5daaef2448dca1a3e7e8e8474461.html",{"d":"2023-02-04T13:15:39.000Z","e":"<h1> ES5实现let与const</h1>\n<p>在es5中，没有块级作用域的概念，只有 <code>函数作用域</code> 的概念。</p>\n<p>webpack进行模块化打包的时候，也需要把不同的函数隔离开，使得各个模块的代码互不影响，它的实现原理也是 <code>IIFE</code></p>\n<h2> 实现let</h2>\n<p>使用 <code>IIFE</code> 可以很方便的创建一个块级作用域，在这个块级作用域之外的地方访问其中的变量都会报错。做到了 <code>let</code> 声明中<strong>隔离作用域</strong>和<strong>防止变量声明提升</strong>的概念。</p>","r":{"minutes":1.99,"words":596},"y":"a","t":"ES5实现let与const","I":1},["/posts/手写算法系列/ES5实现let与const 3f9f5daaef2448dca1a3e7e8e8474461.html","/posts/%E6%89%8B%E5%86%99%E7%AE%97%E6%B3%95%E7%B3%BB%E5%88%97/ES5%E5%AE%9E%E7%8E%B0let%E4%B8%8Econst%203f9f5daaef2448dca1a3e7e8e8474461","/posts/手写算法系列/ES5实现let与const 3f9f5daaef2448dca1a3e7e8e8474461.md","/posts/%E6%89%8B%E5%86%99%E7%AE%97%E6%B3%95%E7%B3%BB%E5%88%97/ES5%E5%AE%9E%E7%8E%B0let%E4%B8%8Econst%203f9f5daaef2448dca1a3e7e8e8474461.md"]],
  ["v-36c6d27b","/posts/%E6%89%8B%E5%86%99%E7%AE%97%E6%B3%95%E7%B3%BB%E5%88%97/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%BB%93%E9%A2%98%E6%80%9D%E8%B7%AF.html",{"d":"2023-02-04T13:15:39.000Z","e":"<h1> 动态规划解题思路</h1>\n<h1> 01背包问题</h1>\n<p>给你一个可装载重量为W的背包和N个物品，每个物品有重量和价值两个属性。其中第i个物品的重量为wt[i]， 价值为val[i]， 现在让你用这个背包装物品，最多能装的价值是多少？</p>\n<h2> 动态规划解题思路</h2>\n<p><strong>一、明确【状态】和【选择】</strong></p>\n<p>可选物品</p>\n<p>背包的容量限制</p>\n<p>状态有两个：</p>\n<ol>\n<li>可选择的物品</li>\n<li>背包的容量</li>\n</ol>\n<p>选择有两个：</p>\n<ol>\n<li>装进背包</li>\n<li>不装进背包</li>\n</ol>","r":{"minutes":2.16,"words":647},"y":"a","t":"动态规划解题思路","I":1},["/posts/手写算法系列/动态规划结题思路.html","/posts/%E6%89%8B%E5%86%99%E7%AE%97%E6%B3%95%E7%B3%BB%E5%88%97/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%BB%93%E9%A2%98%E6%80%9D%E8%B7%AF","/posts/手写算法系列/动态规划结题思路.md","/posts/%E6%89%8B%E5%86%99%E7%AE%97%E6%B3%95%E7%B3%BB%E5%88%97/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%BB%93%E9%A2%98%E6%80%9D%E8%B7%AF.md"]],
  ["v-0a39012e","/posts/%E6%89%8B%E5%86%99%E7%AE%97%E6%B3%95%E7%B3%BB%E5%88%97/%E5%8F%AF%E9%80%86%E5%BA%8F%E6%89%A7%E8%A1%8C%E4%B8%B2%E8%81%94%E5%87%BD%E6%95%B0.html",{"d":"2023-02-04T13:15:39.000Z","e":"<h1> 可逆序执行串联函数</h1>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><pre class=\"language-javascript\"><code><span class=\"token keyword\">let</span> middleware <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nmiddleware<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmiddleware<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2.1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmiddleware<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">3.1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> fn <span class=\"token operator\">=</span> <span class=\"token function\">compose</span><span class=\"token punctuation\">(</span>middleware<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 实现comopse使得输出为1 2 3 3.1 2.1 1.1</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">compose</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":0.27,"words":80},"y":"a","t":"可逆序执行串联函数","I":1},["/posts/手写算法系列/可逆序执行串联函数.html","/posts/%E6%89%8B%E5%86%99%E7%AE%97%E6%B3%95%E7%B3%BB%E5%88%97/%E5%8F%AF%E9%80%86%E5%BA%8F%E6%89%A7%E8%A1%8C%E4%B8%B2%E8%81%94%E5%87%BD%E6%95%B0","/posts/手写算法系列/可逆序执行串联函数.md","/posts/%E6%89%8B%E5%86%99%E7%AE%97%E6%B3%95%E7%B3%BB%E5%88%97/%E5%8F%AF%E9%80%86%E5%BA%8F%E6%89%A7%E8%A1%8C%E4%B8%B2%E8%81%94%E5%87%BD%E6%95%B0.md"]],
  ["v-70d1a412","/posts/%E6%89%8B%E5%86%99%E7%AE%97%E6%B3%95%E7%B3%BB%E5%88%97/%E5%A4%9A%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1%E4%BF%9D%E6%8C%813%E4%B8%AA%E5%B9%B6%E5%8F%91.html",{"d":"2023-02-04T13:15:39.000Z","e":"<h1> 有20个异步请求，如何保持同时三个的并发</h1>\n","r":{"minutes":0.06,"words":18},"y":"a","t":"有20个异步请求，如何保持同时三个的并发","I":1},["/posts/手写算法系列/多异步任务保持3个并发.html","/posts/%E6%89%8B%E5%86%99%E7%AE%97%E6%B3%95%E7%B3%BB%E5%88%97/%E5%A4%9A%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1%E4%BF%9D%E6%8C%813%E4%B8%AA%E5%B9%B6%E5%8F%91","/posts/手写算法系列/多异步任务保持3个并发.md","/posts/%E6%89%8B%E5%86%99%E7%AE%97%E6%B3%95%E7%B3%BB%E5%88%97/%E5%A4%9A%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1%E4%BF%9D%E6%8C%813%E4%B8%AA%E5%B9%B6%E5%8F%91.md"]],
  ["v-b16f5fc6","/posts/%E6%89%8B%E5%86%99%E7%AE%97%E6%B3%95%E7%B3%BB%E5%88%97/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%8F%AF%E9%93%BE%E5%BC%8F%E8%B0%83%E7%94%A8%E3%80%81%E5%8F%AF%E7%AD%89%E5%BE%85%E6%89%A7%E8%A1%8C%E7%9A%84%E7%B1%BB%203ff786584ab24b19b3bca0b613b1a1a5.html",{"d":"2023-02-04T13:15:39.000Z","e":"<h1> 实现一个可链式调用、可等待执行的类</h1>\n<div class=\"language-jsx line-numbers-mode\" data-ext=\"jsx\"><pre class=\"language-jsx\"><code><span class=\"token keyword\">const</span> ny <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NiceTry</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jack\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nny<span class=\"token punctuation\">.</span><span class=\"token function\">sayName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"吃饭\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"玩游戏\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\njack\n等待了2000秒...\n我在吃饭\n等待了1000秒...\n我在玩游戏\n*/</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">NiceTry</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":0.77,"words":231},"y":"a","t":"实现一个可链式调用、可等待执行的类","I":1},["/posts/手写算法系列/实现一个可链式调用、可等待执行的类 3ff786584ab24b19b3bca0b613b1a1a5.html","/posts/%E6%89%8B%E5%86%99%E7%AE%97%E6%B3%95%E7%B3%BB%E5%88%97/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%8F%AF%E9%93%BE%E5%BC%8F%E8%B0%83%E7%94%A8%E3%80%81%E5%8F%AF%E7%AD%89%E5%BE%85%E6%89%A7%E8%A1%8C%E7%9A%84%E7%B1%BB%203ff786584ab24b19b3bca0b613b1a1a5","/posts/手写算法系列/实现一个可链式调用、可等待执行的类 3ff786584ab24b19b3bca0b613b1a1a5.md","/posts/%E6%89%8B%E5%86%99%E7%AE%97%E6%B3%95%E7%B3%BB%E5%88%97/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%8F%AF%E9%93%BE%E5%BC%8F%E8%B0%83%E7%94%A8%E3%80%81%E5%8F%AF%E7%AD%89%E5%BE%85%E6%89%A7%E8%A1%8C%E7%9A%84%E7%B1%BB%203ff786584ab24b19b3bca0b613b1a1a5.md"]],
  ["v-6795f498","/posts/%E6%89%8B%E5%86%99%E7%AE%97%E6%B3%95%E7%B3%BB%E5%88%97/%E6%AF%94%E8%BE%83%E4%B8%A4%E4%B8%AA%E5%AF%B9%E8%B1%A1%E6%98%AF%E5%90%A6%E5%85%A8%E7%AD%89.html",{"d":"2023-02-04T13:15:39.000Z","e":"<h1> 比较两个对象是否全等</h1>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><pre class=\"language-javascript\"><code>Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>location<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div>","r":{"minutes":0.06,"words":17},"y":"a","t":"比较两个对象是否全等","I":1},["/posts/手写算法系列/比较两个对象是否全等.html","/posts/%E6%89%8B%E5%86%99%E7%AE%97%E6%B3%95%E7%B3%BB%E5%88%97/%E6%AF%94%E8%BE%83%E4%B8%A4%E4%B8%AA%E5%AF%B9%E8%B1%A1%E6%98%AF%E5%90%A6%E5%85%A8%E7%AD%89","/posts/手写算法系列/比较两个对象是否全等.md","/posts/%E6%89%8B%E5%86%99%E7%AE%97%E6%B3%95%E7%B3%BB%E5%88%97/%E6%AF%94%E8%BE%83%E4%B8%A4%E4%B8%AA%E5%AF%B9%E8%B1%A1%E6%98%AF%E5%90%A6%E5%85%A8%E7%AD%89.md"]],
  ["v-1bdc6284","/posts/%E6%89%8B%E5%86%99%E7%AE%97%E6%B3%95%E7%B3%BB%E5%88%97/%E6%B7%B1%E6%8B%B7%E8%B4%9D.html",{"d":"2023-02-04T13:15:39.000Z","e":"<h2> JS深拷贝实现</h2>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><pre class=\"language-javascript\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">deepClone</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">;</span> \n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> obj <span class=\"token operator\">!==</span> <span class=\"token string\">\"object\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> cloneObj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">obj<span class=\"token punctuation\">.</span>constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> key <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 实现一个递归拷贝</span>\n        cloneObj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">deepClone</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> cloneObj<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":0.21,"words":64},"y":"a","t":"","I":1},["/posts/手写算法系列/深拷贝.html","/posts/%E6%89%8B%E5%86%99%E7%AE%97%E6%B3%95%E7%B3%BB%E5%88%97/%E6%B7%B1%E6%8B%B7%E8%B4%9D","/posts/手写算法系列/深拷贝.md","/posts/%E6%89%8B%E5%86%99%E7%AE%97%E6%B3%95%E7%B3%BB%E5%88%97/%E6%B7%B1%E6%8B%B7%E8%B4%9D.md"]],
  ["v-925b3b1a","/posts/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/Event%20Loop%E5%9C%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E5%92%8CNode%E7%8E%AF%E5%A2%83%E4%B8%AD%E7%9A%84%E5%8C%BA%E5%88%AB.html",{"d":"2023-02-04T13:15:39.000Z","e":"<h1> Event Loop在浏览器中和Node环境中的区别</h1>\n<h2> 浏览器中的Event Loop</h2>\n<p>事件循环中的异步队列有两种：macro（宏任务）队列和 micro（微任务）队列。宏任务队列可以有多个，微任务队列只有一个。\n常见的 macro-task 比如：setTimeout、setInterval、 setImmediate、script（整体代码）、 I/O 操作、UI 渲染等。\n常见的 micro-task 比如: process.nextTick、new Promise().then(回调)、MutationObserver(html5 新特性) 等。</p>","r":{"minutes":2.32,"words":696},"y":"a","t":"Event Loop在浏览器中和Node环境中的区别","I":1},["/posts/浏览器相关知识/Event Loop在浏览器中和Node环境中的区别.html","/posts/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/Event%20Loop%E5%9C%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E5%92%8CNode%E7%8E%AF%E5%A2%83%E4%B8%AD%E7%9A%84%E5%8C%BA%E5%88%AB","/posts/浏览器相关知识/Event Loop在浏览器中和Node环境中的区别.md","/posts/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/Event%20Loop%E5%9C%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E5%92%8CNode%E7%8E%AF%E5%A2%83%E4%B8%AD%E7%9A%84%E5%8C%BA%E5%88%AB.md"]],
  ["v-09c2bb22","/posts/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/HTTP1%20x%E5%92%8CHTTP2%200%E5%8C%BA%E5%88%AB.html",{"d":"2023-02-04T13:15:39.000Z","e":"<h1> HTTP1.x和HTTP2.0区别</h1>\n<p>HTTP2采用二进制格式传输，取代了HTTP1.x的文本格式，二进制格式解析更高效。多路复用代替了HTTP1.x的序列和阻塞机制，所有的相同域名请求都通过同一个TCP连接并发完成。在HTTP1.x中，并发多个请求需要多个TCP连接，浏览器为了控制资源会有6-8个TCP连接都限制。</p>\n<p><strong>HTTP2中</strong></p>\n<ul>\n<li>同域名下所有通信都在单个连接上完成，消除了因多个 TCP 连接而带来的延时和内存消耗。</li>\n<li>单个连接上可以并行交错的请求和响应，之间互不干扰</li>\n</ul>","r":{"minutes":2.29,"words":688},"y":"a","t":"HTTP1.x和HTTP2.0区别","I":1},["/posts/浏览器相关知识/HTTP1 x和HTTP2 0区别.html","/posts/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/HTTP1%20x%E5%92%8CHTTP2%200%E5%8C%BA%E5%88%AB","/posts/浏览器相关知识/HTTP1 x和HTTP2 0区别.md","/posts/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/HTTP1%20x%E5%92%8CHTTP2%200%E5%8C%BA%E5%88%AB.md"]],
  ["v-43a90af2","/posts/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/Http%E7%9A%84session%E5%92%8Ccookie.html",{"d":"2023-02-04T13:15:39.000Z","e":"<h1> Http的session和cookie</h1>\n<p>cookie算是session的一种实现方式。由于http无状态的特性，服务端想要知道是哪个用户请求的接口，就必须有一个标识来确认，服务端通过某种机制获取用户信息，就是一个典型的<strong>session</strong>场景。现在主流的方案是cookie里携带一个session的id标识，服务端拿到这个id后，查询得知是哪个用户调的接口。</p>\n<blockquote>\n<p>服务端保存Session的方法很多，内存、数据库、文件都有。集群的时候也要考虑Session的转移，在大型的网站，一般会有专门的Session服务器集群，用来保存用户会话，这个时候 Session 信息都是放在内存的，使用一些缓存服务比如Memcached之类的来放 Session。</p>\n</blockquote>","r":{"minutes":0.92,"words":275},"y":"a","t":"Http的session和cookie","I":1},["/posts/浏览器相关知识/Http的session和cookie.html","/posts/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/Http%E7%9A%84session%E5%92%8Ccookie","/posts/浏览器相关知识/Http的session和cookie.md","/posts/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/Http%E7%9A%84session%E5%92%8Ccookie.md"]],
  ["v-1e7178c0","/posts/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%92%8C%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B.html",{"d":"2023-02-04T13:15:39.000Z","e":"<h1> 三次握手和四次挥手</h1>\n<blockquote>\n<p>客户端和服务器建立通信的过程中要进行三次握手，结束通信要进行四次挥手。</p>\n</blockquote>\n<p>其实”握手“这一词本身是具有歧义的，”握手“不应该是双方手掌接触互相传输信息吗?<br>\n已经搞懂本文的同学会发现，其实三次握手就是三次单向交流的过程，即我告诉你，你告诉我，我再告诉你。</p>\n<p>好吧，暂且不管哪个傻吊取得这个名字。我们回到正题，首先了解一下为什么需要三次握手吧，让我们带着好奇心搞懂本文。</p>\n<h3> 假设客户端和服务器直接进行连接，会出现什么问题?</h3>\n<p>由于网络传输是有延时的(要通过网络光纤和各种中间代理服务器)，在传输的过程中，比如客户端发起了 SYN=1 创建连接的请求(第一次握手)。</p>","r":{"minutes":7.33,"words":2200},"y":"a","t":"三次握手和四次挥手","I":1},["/posts/浏览器相关知识/三次握手和四次挥手.html","/posts/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%92%8C%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B","/posts/浏览器相关知识/三次握手和四次挥手.md","/posts/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%92%8C%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B.md"]],
  ["v-4192394a","/posts/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/%E4%BA%8B%E4%BB%B6%E4%BB%A3%E7%90%86%E7%9A%84%E7%90%86%E8%A7%A3.html",{"d":"2023-02-04T13:15:39.000Z","e":"<h1> 事件代理（委托）的理解</h1>\n<p>事件代理是指通过监听父元素并绑定函数，达到子元素触发事件时引发的事件冒泡，然后触发父元素绑定的函数。</p>\n<blockquote>\n<p>形象的比喻：爹有3个儿，监听爹，给爹绑定一条指令，孩子读书的时候，爹要交学费。  大娃上学了，大娃的事件触发，事件冒泡到爹（大娃告诉爹 ps: nodeName：大娃）， 爹给大娃交学费（爹的函数中给大娃的属性做些操作），这就是一个事件代理的思想，不需要给每个娃绑定事件，而是给爹绑定事件。 （reonce原创）</p>\n</blockquote>\n<p>由于事件流的特性，可以把多个事件函数减为一个，对于不同的元素可以有不同的处理方法。</p>","r":{"minutes":1.66,"words":499},"y":"a","t":"事件代理（委托）的理解","I":1},["/posts/浏览器相关知识/事件代理的理解.html","/posts/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/%E4%BA%8B%E4%BB%B6%E4%BB%A3%E7%90%86%E7%9A%84%E7%90%86%E8%A7%A3","/posts/浏览器相关知识/事件代理的理解.md","/posts/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/%E4%BA%8B%E4%BB%B6%E4%BB%A3%E7%90%86%E7%9A%84%E7%90%86%E8%A7%A3.md"]],
  ["v-1e5b26d9","/posts/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/%E5%89%8D%E7%AB%AF%E7%9A%84%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%EF%BC%8C%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6.html",{"d":"2023-02-04T13:15:39.000Z","e":"<h1> 前端的内存分配，垃圾回收</h1>\n<h2> 内存的生命周期</h2>\n<ul>\n<li>内存分配： 生命变量，函数，对象的时候，js会自动分配内存</li>\n<li>内存使用： 调用的时候，使用的时候</li>\n<li>内存回收： 下面讲</li>\n</ul>\n<h2> js中的垃圾回收机制</h2>\n<h3> <strong>引用计数垃圾回收</strong></h3>\n<p>如果a对象对b对象有访问权限，那么称为a引用b对象。</p>\n<p>检查b有没有被引用，如果没有使用了，回收。</p>\n<p>缺陷： <strong>循环引用</strong>，a引用了b，b也引用了a，造成内存泄漏。</p>","r":{"minutes":2,"words":599},"y":"a","t":"前端的内存分配，垃圾回收","I":1},["/posts/浏览器相关知识/前端的内存分配，垃圾回收.html","/posts/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/%E5%89%8D%E7%AB%AF%E7%9A%84%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%EF%BC%8C%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6","/posts/浏览器相关知识/前端的内存分配，垃圾回收.md","/posts/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/%E5%89%8D%E7%AB%AF%E7%9A%84%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%EF%BC%8C%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6.md"]],
  ["v-42badac9","/posts/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/%E6%91%86%E8%84%B1%20console.log%20%EF%BC%8C%E4%BD%BF%E7%94%A8%E6%9B%B4%E4%BC%98%E8%B4%A8%E7%9A%84%E5%89%8D%E7%AB%AF%E8%B0%83%E8%AF%95%E6%96%B9%E6%A1%88.html",{"d":"2023-02-04T13:15:39.000Z","e":"<h1> 摆脱 console.log ，使用更优质的前端调试方案</h1>\n<p>程序调试是程序开发必不可少的一环，刚开始接触前端调试时，最常用的就是 <code>console.log</code> 打印变量进行调试，本文会分享一些笔者学习到的前端调试方法，减少对 <code>console.log</code> 调试方式的依赖，选择更优质的前端调试方案。</p>\n<blockquote>\n<p>本文中提到的 <code>command</code> 键，在 Windows 系统中用 <code>control</code> 键替代即可</p>\n</blockquote>\n<h2> 1. 为什么不用 console.log 一把梭</h2>","r":{"minutes":6.25,"words":1876},"y":"a","t":"摆脱 console.log ，使用更优质的前端调试方案","I":1},["/posts/浏览器相关知识/摆脱 console.log ，使用更优质的前端调试方案.html","/posts/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/%E6%91%86%E8%84%B1%20console.log%20%EF%BC%8C%E4%BD%BF%E7%94%A8%E6%9B%B4%E4%BC%98%E8%B4%A8%E7%9A%84%E5%89%8D%E7%AB%AF%E8%B0%83%E8%AF%95%E6%96%B9%E6%A1%88","/posts/浏览器相关知识/摆脱 console.log ，使用更优质的前端调试方案.md","/posts/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/%E6%91%86%E8%84%B1%20console.log%20%EF%BC%8C%E4%BD%BF%E7%94%A8%E6%9B%B4%E4%BC%98%E8%B4%A8%E7%9A%84%E5%89%8D%E7%AB%AF%E8%B0%83%E8%AF%95%E6%96%B9%E6%A1%88.md"]],
  ["v-444987b6","/posts/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%A4%9A%E8%AF%AD%E8%A8%80.html",{"d":"2023-02-04T13:15:39.000Z","e":"<h1> 浏览器多语言</h1>\n<p>首先采用utf-8编码</p>\n<p>针对静态的，就准备多套路由文件，通过路径区分，例如MDN等</p>\n<p>针对动态的，通过语言变量Ln_name去判断，传给后端呈现</p>\n<p>多语言网站实现计划 ：</p>\n<p>1、静态：就是为每种语言分辨准备一套页面文件，要么通过文件后缀名来区分不同语言，要么通过子目录来区分不同语言。例如对于首页文件index_en.htm供给英语界面，index_gb.htm供给简体中文界面，index_big.htm供给繁体中文界面，或者是en/index.htm供给英语界面，gb/index.htm供给简体中文界面，big/index.htm供给繁体中文界面，一旦用户选择了需要的语言后，主动跳转到相应的页面，首页以下其他链接也是按照同样方法处理。从保护的角度来看，通过子目录比通过文件后缀名来区分不同语言版本显得要简略明了。2，动态：站点内所有页面文件都是动态页面文件（PHP，ASP等）而不是静态页面文件，在需要输出语言文字的处所同一采用语言变量来表现，这些语言变量可以根据用户选择不同的语言赋予不同的值，从而能够实现在不同的语言环境下输出不同的文字。例如：语言变量ln_name，当用户选择的语言是英语时赋值为“Name”，当用户选择的语言是简体中文时赋值为“姓名”，这样就可以适应不同语言时的输出。采用静态方法的长处是页面直接输出到客户端，不需要在服务器上运行，占用服务器的资源比拟少，系统能够支撑的并发连接数较多，毛病是要为每种语言制作一套页面文件，很多内容即使是和语言无关的也要分不同语言来存储，因此占用的存储空间较多。采用动态方法和静态方法的优毛病正好相反，它的长处是动态页面文件只有一套，不同语言的文字应用语言变量来存储，和语言无关的内容只存储一份，占用的存储空间较少，并且扩大新语言比拟轻易，毛病需要在服务器上运行，然后把成果输进到客户端，占用服务器的资源比拟多，系统能够支撑的并发连接数较少。</p>","r":{"minutes":2.18,"words":655},"y":"a","t":"浏览器多语言","I":1},["/posts/浏览器相关知识/浏览器多语言.html","/posts/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%A4%9A%E8%AF%AD%E8%A8%80","/posts/浏览器相关知识/浏览器多语言.md","/posts/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%A4%9A%E8%AF%AD%E8%A8%80.md"]],
  ["v-6901a767","/posts/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/%E8%B7%A8%E5%9F%9F%E6%89%A7%E8%A1%8C%E3%80%81HTTP%E7%AE%80%E5%8D%95%E5%A4%8D%E6%9D%82%E8%AF%B7%E6%B1%82.html",{"d":"2023-02-04T13:15:39.000Z","e":"<h1> 跨域执行、HTTP简单复杂请求</h1>\n<h1> 跨域问题</h1>\n<p><a href=\"https://reonce.github.io/2022/06/11/%E8%B7%A8%E5%9F%9F%E8%AF%A6%E8%A7%A3/\" target=\"_blank\" rel=\"noopener noreferrer\">https://reonce.github.io/2022/06/11/跨域详解/</a></p>\n<h1> <strong>跨域的请求在服务端会不会真正执行？</strong></h1>\n<h2> <strong>跨域请求的拦截</strong></h2>\n","r":{"minutes":3.97,"words":1192},"y":"a","t":"跨域执行、HTTP简单复杂请求","I":1},["/posts/浏览器相关知识/跨域执行、HTTP简单复杂请求.html","/posts/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/%E8%B7%A8%E5%9F%9F%E6%89%A7%E8%A1%8C%E3%80%81HTTP%E7%AE%80%E5%8D%95%E5%A4%8D%E6%9D%82%E8%AF%B7%E6%B1%82","/posts/浏览器相关知识/跨域执行、HTTP简单复杂请求.md","/posts/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/%E8%B7%A8%E5%9F%9F%E6%89%A7%E8%A1%8C%E3%80%81HTTP%E7%AE%80%E5%8D%95%E5%A4%8D%E6%9D%82%E8%AF%B7%E6%B1%82.md"]],
  ["v-cc5e397e","/posts/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/%E8%B7%A8%E5%9F%9F%E8%AF%A6%E8%A7%A3.html",{"d":"2023-02-04T13:15:39.000Z","e":"<h1> 跨域详解</h1>\n<p>跨域问题是一道经典的题目了，本文将解读并用代码实现跨域的解决方案。</p>\n<h2> 什么是跨域</h2>\n<p>跨域是浏览器的一种安全策略（同源策略），它要求一个网址的请求必须有相同的域名、端口和协议，否则无法正常请求，形成“跨域”。</p>\n<p>一个域名地址的组成：</p>\n<ul>\n<li>http://  ⇒ 协议</li>\n<li>www. ⇒ 子域名</li>\n<li><a href=\"http://abc.com\" target=\"_blank\" rel=\"noopener noreferrer\">abc.com</a> ⇒主域名</li>\n<li>: 8080 ⇒ 端口号</li>\n<li>/script/jquery.js ⇒ 请求资源地址</li>\n</ul>","r":{"minutes":8.36,"words":2509},"y":"a","t":"跨域详解","I":1},["/posts/浏览器相关知识/跨域详解.html","/posts/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/%E8%B7%A8%E5%9F%9F%E8%AF%A6%E8%A7%A3","/posts/浏览器相关知识/跨域详解.md","/posts/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/%E8%B7%A8%E5%9F%9F%E8%AF%A6%E8%A7%A3.md"]],
  ["v-5ec61931","/posts/JavaScipt%E5%9F%BA%E7%A1%80/%E7%BA%A2%E5%AE%9D%E4%B9%A6/13.2%E7%94%A8%E6%88%B7%E4%BB%A3%E7%90%86%E6%A3%80%E6%B5%8B.html",{"d":"2023-02-04T13:15:39.000Z","e":"<h1> 13.2用户代理检测</h1>\n<h2> 概念</h2>\n<p>在http1.0和1.1的协议中，要求浏览器应该向服务器发送一段包含<strong>浏览器名称</strong>和<strong>版本信息</strong>的字符串\n通过浏览器携带的<strong>用户代理字符串</strong>来判断当前是什么浏览器的方法叫做<strong>用户代理检测</strong></p>\n<h2> 早期的使用</h2>\n<p>美国国家超级计算机中心发布于1993年的<code>Mosaic</code>是早期web浏览器的代表。它的用户代理字符串格式是： <code>Mosaic/0.9</code>\n后面崛起的网景公司开发浏览器时，将 浏览器代号取为 <code>Mozilla</code>  （Mosaic Killer）\n最开始它的字符串格式是这样的<code>Mozilla/Version [language] (Platform; Encryption)</code>\n除了http要求的信息，它还额外携带了当前语言、操作系统和加密类型</p>","r":{"minutes":3.9,"words":1169},"y":"a","t":"13.2用户代理检测","I":1},["/posts/JavaScipt基础/红宝书/13.2用户代理检测.html","/posts/JavaScipt%E5%9F%BA%E7%A1%80/%E7%BA%A2%E5%AE%9D%E4%B9%A6/13.2%E7%94%A8%E6%88%B7%E4%BB%A3%E7%90%86%E6%A3%80%E6%B5%8B","/posts/JavaScipt基础/红宝书/13.2用户代理检测.md","/posts/JavaScipt%E5%9F%BA%E7%A1%80/%E7%BA%A2%E5%AE%9D%E4%B9%A6/13.2%E7%94%A8%E6%88%B7%E4%BB%A3%E7%90%86%E6%A3%80%E6%B5%8B.md"]],
  ["v-3e882234","/posts/JavaScipt%E5%9F%BA%E7%A1%80/%E7%BA%A2%E5%AE%9D%E4%B9%A6/13.3%20%E8%BD%AF%E4%BB%B6%E4%B8%8E%E7%A1%AC%E4%BB%B6%E6%A3%80%E6%B5%8B.html",{"d":"2023-02-04T13:15:39.000Z","e":"<h1> <strong>13.3 软件与硬件检测</strong></h1>\n<p>前两节提到的特性检测和用户代理检测是两种常用的识别浏览器方式。而navigator和screen对象也提供了对页面所在软件环境的信息。</p>\n<h2> navigator</h2>\n<h3> navigator.oscpu</h3>\n<p>这个字段返回了操作系统、系统架构相关信息</p>\n<h3> navigator.vendor</h3>\n<p>返回浏览器的开发商信息</p>\n<h3> navigator.platform</h3>\n<p>返回一个表示浏览器所在操作系统的字符串</p>\n<h2> screen</h2>","r":{"minutes":1.42,"words":427},"y":"a","t":"13.3 软件与硬件检测","I":1},["/posts/JavaScipt基础/红宝书/13.3 软件与硬件检测.html","/posts/JavaScipt%E5%9F%BA%E7%A1%80/%E7%BA%A2%E5%AE%9D%E4%B9%A6/13.3%20%E8%BD%AF%E4%BB%B6%E4%B8%8E%E7%A1%AC%E4%BB%B6%E6%A3%80%E6%B5%8B","/posts/JavaScipt基础/红宝书/13.3 软件与硬件检测.md","/posts/JavaScipt%E5%9F%BA%E7%A1%80/%E7%BA%A2%E5%AE%9D%E4%B9%A6/13.3%20%E8%BD%AF%E4%BB%B6%E4%B8%8E%E7%A1%AC%E4%BB%B6%E6%A3%80%E6%B5%8B.md"]],
  ["v-d2452084","/posts/JavaScipt%E5%9F%BA%E7%A1%80/%E7%BA%A2%E5%AE%9D%E4%B9%A6/14.1%20%E8%8A%82%E7%82%B9%E5%B1%82%E7%BA%A7%20Node%E8%8A%82%E7%82%B9.html",{"d":"2023-02-04T13:15:39.000Z","e":"<h1> 第十四章DOM  14.1节点层级 Node节点</h1>\n<p>由于对BOM整章的学习，现在在心态上已经完全可以去学习DOM了。今天只看完了14.1.1小节，不过也算有所收获，毕竟每晚的时间有限，重在积累。</p>\n<h2> DOM概念</h2>\n<p>DOM表示由多层节点构成的文档，通过它开发者可以添加、删除和修改页面的各个部分。</p>\n<p>document节点表示每个文档的根节点。</p>\n<h2> Node类型</h2>\n<p>DOM Level1中就描述了node的接口，这个接口是面向所有DOM节点的，都必须实现。</p>\n<p>每个节点都存在一个叫做 <strong>nodeType</strong>的属性，表示节点的类型。它由定义好的十二个数值分别表示不同的节点，也就是规范规定的映射。</p>","r":{"minutes":4.43,"words":1330},"y":"a","t":"第十四章DOM  14.1节点层级 Node节点","I":1},["/posts/JavaScipt基础/红宝书/14.1 节点层级 Node节点.html","/posts/JavaScipt%E5%9F%BA%E7%A1%80/%E7%BA%A2%E5%AE%9D%E4%B9%A6/14.1%20%E8%8A%82%E7%82%B9%E5%B1%82%E7%BA%A7%20Node%E8%8A%82%E7%82%B9","/posts/JavaScipt基础/红宝书/14.1 节点层级 Node节点.md","/posts/JavaScipt%E5%9F%BA%E7%A1%80/%E7%BA%A2%E5%AE%9D%E4%B9%A6/14.1%20%E8%8A%82%E7%82%B9%E5%B1%82%E7%BA%A7%20Node%E8%8A%82%E7%82%B9.md"]],
  ["v-caede9ae","/posts/JavaScipt%E5%9F%BA%E7%A1%80/%E7%BA%A2%E5%AE%9D%E4%B9%A6/14.1.3%20Element%E7%B1%BB%E5%9E%8B.html",{"d":"2023-02-04T13:15:39.000Z","e":"<h1> 14.1.3 Element 类型</h1>\n<h2> 概念</h2>\n<p>ELement 类型表示元素类型，暴露了访问元素标签名、子节点和属性的能力。</p>\n<p>可以直接访问 nodeName 和 tagName 属性来获得元素标签名，这两个元素返回相同的值</p>\n<p>div.tagName 实际返回的是大写的 “DIV” 所有进行比较的时候，最好都转换成小写去比较</p>\n<h2> HTML 元素</h2>\n<p>HTML 元素都通过 HTMLELEMENT 类型表示，包括直接实例和间接实例，并且继承了 ELement 并增加了一些属性。这些属性可以直接获取访问对应的值。详见 P415表格字典</p>","r":{"minutes":2.61,"words":782},"y":"a","t":"14.1.3 Element 类型","I":1},["/posts/JavaScipt基础/红宝书/14.1.3 Element类型.html","/posts/JavaScipt%E5%9F%BA%E7%A1%80/%E7%BA%A2%E5%AE%9D%E4%B9%A6/14.1.3%20Element%E7%B1%BB%E5%9E%8B","/posts/JavaScipt基础/红宝书/14.1.3 Element类型.md","/posts/JavaScipt%E5%9F%BA%E7%A1%80/%E7%BA%A2%E5%AE%9D%E4%B9%A6/14.1.3%20Element%E7%B1%BB%E5%9E%8B.md"]],
  ["v-31e2d74b","/posts/JavaScipt%E5%9F%BA%E7%A1%80/%E7%BA%A2%E5%AE%9D%E4%B9%A6/14.1.4%20Text%E7%B1%BB%E5%9E%8B.html",{"d":"2023-02-04T13:15:39.000Z","e":"<h1> 14.1.4 Text类型</h1>\n<h2> 概念</h2>\n<p>Text 节点是由 Text 类型表示，也就是标签之间的文本字符</p>\n<p>暴露了几个方法：</p>\n<ul>\n<li>appendData(text)</li>\n<li>deleteData(offset, count) 在 offset 开始删除 count个字符</li>\n<li>insertData(offset, text)  在 offset 位置插入文本</li>\n<li>replaceData(offset, count, text) 在 用 text 替换从 offset 开始的 count 个字符</li>\n<li>splitText(offset) 在 offset 位置将文本拆分成两个文本节点</li>\n<li>subStringData(offset, count) 提取从位置 offset 到 offset+count  的文本</li>\n</ul>","r":{"minutes":0.91,"words":273},"y":"a","t":"14.1.4 Text类型","I":1},["/posts/JavaScipt基础/红宝书/14.1.4 Text类型.html","/posts/JavaScipt%E5%9F%BA%E7%A1%80/%E7%BA%A2%E5%AE%9D%E4%B9%A6/14.1.4%20Text%E7%B1%BB%E5%9E%8B","/posts/JavaScipt基础/红宝书/14.1.4 Text类型.md","/posts/JavaScipt%E5%9F%BA%E7%A1%80/%E7%BA%A2%E5%AE%9D%E4%B9%A6/14.1.4%20Text%E7%B1%BB%E5%9E%8B.md"]],
  ["v-2ce62492","/posts/JavaScipt%E5%9F%BA%E7%A1%80/%E7%BA%A2%E5%AE%9D%E4%B9%A6/16.2.1%20%20%E5%AD%98%E5%8F%96%E5%85%83%E7%B4%A0%E6%A0%B7%E5%BC%8F.html",{"d":"2023-02-04T13:15:39.000Z","e":"<h1> 16.2.1  存取元素样式</h1>\n<p>CSS 属性名是使用连字符表示的，例如 <code>backgroud-color</code>，所以在 JS 中必须转换成驼峰大小写形式， 例如 <code>backgroundColor</code></p>\n<p>大多数都会像上面一样转换过来。但是 <code>float</code> 不行，它是 JS 的保留关键字，需要用 <code>cssFloat</code> 来表示</p>\n<p>通过 JS 设置样式的时候，使用小驼峰形式的属性名就可以直接设置了，例如：</p>\n<div class=\"language-js' line-numbers-mode\" data-ext=\"js'\"><pre class=\"language-js'\"><code>div.style.backgroundColor = 'red'\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div>","r":{"minutes":1.91,"words":572},"y":"a","t":"16.2.1  存取元素样式","I":1},["/posts/JavaScipt基础/红宝书/16.2.1  存取元素样式.html","/posts/JavaScipt%E5%9F%BA%E7%A1%80/%E7%BA%A2%E5%AE%9D%E4%B9%A6/16.2.1%20%20%E5%AD%98%E5%8F%96%E5%85%83%E7%B4%A0%E6%A0%B7%E5%BC%8F","/posts/JavaScipt基础/红宝书/16.2.1  存取元素样式.md","/posts/JavaScipt%E5%9F%BA%E7%A1%80/%E7%BA%A2%E5%AE%9D%E4%B9%A6/16.2.1%20%20%E5%AD%98%E5%8F%96%E5%85%83%E7%B4%A0%E6%A0%B7%E5%BC%8F.md"]],
  ["v-6012c088","/posts/JavaScipt%E5%9F%BA%E7%A1%80/%E7%BA%A2%E5%AE%9D%E4%B9%A6/17.1%E4%BA%8B%E4%BB%B6%E6%B5%81-17.2%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%E7%A8%8B%E5%BA%8F.html",{"d":"2023-02-04T13:15:39.000Z","e":"<h1> 第17章 事件  17.1事件流-17.2事件处理程序</h1>\n<h2> 17.1 事件流</h2>\n<p><strong>事件流</strong> 描述了页面接收事件的顺序，事件流方案分为 <strong>事件冒泡</strong> 和 <strong>事件冒泡</strong>，所有现代浏览器都支持它们。</p>\n<h3> 17.1.1 事件冒泡</h3>\n<p>由 IE 团队提出，事件从触发事件的具体元素节点逐级向上传播到不具体的元素(文档)</p>\n<h3> 17.1.2 事件捕获</h3>\n<p>由 NetScape 团队提出，事件从最不具体的节点（文档) 最先接收事件，之后逐级捕获到具体触发事件的元素节点</p>","r":{"minutes":3.56,"words":1068},"y":"a","t":"第17章 事件  17.1事件流-17.2事件处理程序","I":1},["/posts/JavaScipt基础/红宝书/17.1事件流-17.2事件处理程序.html","/posts/JavaScipt%E5%9F%BA%E7%A1%80/%E7%BA%A2%E5%AE%9D%E4%B9%A6/17.1%E4%BA%8B%E4%BB%B6%E6%B5%81-17.2%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%E7%A8%8B%E5%BA%8F","/posts/JavaScipt基础/红宝书/17.1事件流-17.2事件处理程序.md","/posts/JavaScipt%E5%9F%BA%E7%A1%80/%E7%BA%A2%E5%AE%9D%E4%B9%A6/17.1%E4%BA%8B%E4%BB%B6%E6%B5%81-17.2%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%E7%A8%8B%E5%BA%8F.md"]],
  ["v-2b3b3850","/posts/JavaScipt%E5%9F%BA%E7%A1%80/%E7%BA%A2%E5%AE%9D%E4%B9%A6/JSON.html",{"d":"2023-02-04T13:15:39.000Z","e":"<h1> JSON</h1>\n<p><code>JSON.stringify(obj, []/fun, number/string)</code>接收三个参数，第一个是要序列化的对象。第二个参数可以是一个包含要序列化对象的键的数组，或者是一个函数，这个函数接收<code>(key, value)</code>两个参数。第三个参数表示缩进。</p>\n<p>对象中可以定义<code>toJSON()</code>方法，序列化json时，将返回对象定义的<code>toJSON()</code>方法的返回值。</p>\n<p><code>JSON.parse()</code>方法也可以接受一个函数作为第二个参数，这个参数被称为<strong>复活函数</strong>。复活函数接受两个参数（key, value），也需要返回值，如果返回undefined，则结果中会删除相应的键。如果返回了其他值，则该值会成为响应键的值从插入到结果中。</p>","r":{"minutes":0.65,"words":194},"y":"a","t":"JSON","I":1},["/posts/JavaScipt基础/红宝书/JSON.html","/posts/JavaScipt%E5%9F%BA%E7%A1%80/%E7%BA%A2%E5%AE%9D%E4%B9%A6/JSON","/posts/JavaScipt基础/红宝书/JSON.md","/posts/JavaScipt%E5%9F%BA%E7%A1%80/%E7%BA%A2%E5%AE%9D%E4%B9%A6/JSON.md"]],
  ["v-31f424c2","/posts/JavaScipt%E5%9F%BA%E7%A1%80/%E7%BA%A2%E5%AE%9D%E4%B9%A6/Javascript%E7%B1%BB.html",{"d":"2023-02-04T13:15:39.000Z","e":"<h1> 类</h1>\n<p>ES6引入新的class关键字，是一个新的基础语法糖。虽然表面上看起来支持正式的面向对象编程，但实际上<strong>背后使用的仍然是原型和构造函数</strong>的概念。</p>\n<p>定义类的两种方式：类声明和类表达式。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><pre class=\"language-javascript\"><code><span class=\"token comment\">// 类声明</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 类表达式</span>\n<span class=\"token keyword\">const</span> Animal <span class=\"token operator\">=</span> <span class=\"token keyword\">class</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":2.85,"words":855},"y":"a","t":"类","I":1},["/posts/JavaScipt基础/红宝书/Javascript类.html","/posts/JavaScipt%E5%9F%BA%E7%A1%80/%E7%BA%A2%E5%AE%9D%E4%B9%A6/Javascript%E7%B1%BB","/posts/JavaScipt基础/红宝书/Javascript类.md","/posts/JavaScipt%E5%9F%BA%E7%A1%80/%E7%BA%A2%E5%AE%9D%E4%B9%A6/Javascript%E7%B1%BB.md"]],
  ["v-2009c8b6","/posts/JavaScipt%E5%9F%BA%E7%A1%80/%E7%BA%A2%E5%AE%9D%E4%B9%A6/Web%20Socket.html",{"d":"2023-02-04T13:15:39.000Z","e":"<h1> Web Socket</h1>\n<p>​\tWeb Socket目标是通过一个长时连接实现与服务器全双工、双向的通信。</p>\n<p>在JS创建它的时候，一个HTTP请求会发送到服务器以初始化连接。</p>\n<h2> API</h2>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><pre class=\"language-javascript\"><code><span class=\"token keyword\">let</span> socket <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebSocket</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ws://www.example.com/server.php\"</span><span class=\"token punctuation\">)</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div>","r":{"minutes":1.54,"words":463},"y":"a","t":"Web Socket","I":1},["/posts/JavaScipt基础/红宝书/Web Socket.html","/posts/JavaScipt%E5%9F%BA%E7%A1%80/%E7%BA%A2%E5%AE%9D%E4%B9%A6/Web%20Socket","/posts/JavaScipt基础/红宝书/Web Socket.md","/posts/JavaScipt%E5%9F%BA%E7%A1%80/%E7%BA%A2%E5%AE%9D%E4%B9%A6/Web%20Socket.md"]],
  ["v-5bb40ee2","/posts/JavaScipt%E5%9F%BA%E7%A1%80/%E7%BA%A2%E5%AE%9D%E4%B9%A6/script%E6%A0%87%E7%AD%BE-%E8%84%9A%E6%9C%AC%E5%8A%A0%E8%BD%BD.html",{"d":"2023-02-04T13:15:39.000Z","e":"<h2> <code>&lt;Script&gt;</code>元素</h2>\n<h3> crossorigin</h3>\n<blockquote>\n<p>涉及到的元素  1.script 2.link 3.img 4.audio 5.video</p>\n</blockquote>\n<p>当浏览器请求这些标签的时候，可以配置跨源</p>\n<p><strong>跨源</strong> origin由三部分组成</p>\n<p>源指的是 协议、域名、端口。 即1.protocol 2.domain  3.port</p>\n<p>可以通过设置“凭据模式”：</p>\n<ol>\n<li><code>ananymous</code> 表示不包含凭据，就是不设置cookie，跨源的时候不在请求中附加值，保持匿名请求</li>\n<li><code>use-credentials</code>表示在请求中包含凭据，cookie、tls证书、http认证（用户身份）</li>\n<li>不设置这个属性，或者值是\"\"，相当于<code>ananymous</code></li>\n</ol>","r":{"minutes":1.44,"words":431},"y":"a","t":"","I":1},["/posts/JavaScipt基础/红宝书/script标签-脚本加载.html","/posts/JavaScipt%E5%9F%BA%E7%A1%80/%E7%BA%A2%E5%AE%9D%E4%B9%A6/script%E6%A0%87%E7%AD%BE-%E8%84%9A%E6%9C%AC%E5%8A%A0%E8%BD%BD","/posts/JavaScipt基础/红宝书/script标签-脚本加载.md","/posts/JavaScipt%E5%9F%BA%E7%A1%80/%E7%BA%A2%E5%AE%9D%E4%B9%A6/script%E6%A0%87%E7%AD%BE-%E8%84%9A%E6%9C%AC%E5%8A%A0%E8%BD%BD.md"]],
  ["v-0195f72f","/posts/JavaScipt%E5%9F%BA%E7%A1%80/%E7%BA%A2%E5%AE%9D%E4%B9%A6/%E4%BA%8B%E4%BB%B6.html",{"d":"2023-02-04T13:15:39.000Z","e":"<h1> 事件</h1>\n<p>JS与HTML的交互是通过<strong>事件</strong>实现的，事件代表文档或浏览器窗口中某个有意义的时刻。</p>\n<p>可以使用仅在事件发生时执行的<strong>监听器</strong>（也叫处理程序）订阅事件。在传统软件工程领域，这个模型叫“观察者模式”。</p>\n<h2> 事件流</h2>\n<p>事件流描述了页面接受时间的顺序。IE支持事件冒泡流，而Netscape Communicator支持事件捕获流。</p>\n<h2> 事件属性和方法</h2>\n<p><code>preventDefault()</code>  用于取消事件的默认行为，只有<code>cancelabel</code>为true才可以调用这个方法。</p>","r":{"minutes":0.71,"words":213},"y":"a","t":"事件","I":1},["/posts/JavaScipt基础/红宝书/事件.html","/posts/JavaScipt%E5%9F%BA%E7%A1%80/%E7%BA%A2%E5%AE%9D%E4%B9%A6/%E4%BA%8B%E4%BB%B6","/posts/JavaScipt基础/红宝书/事件.md","/posts/JavaScipt%E5%9F%BA%E7%A1%80/%E7%BA%A2%E5%AE%9D%E4%B9%A6/%E4%BA%8B%E4%BB%B6.md"]],
  ["v-08636197","/posts/JavaScipt%E5%9F%BA%E7%A1%80/%E7%BA%A2%E5%AE%9D%E4%B9%A6/%E4%BB%A3%E7%90%86%E4%B8%8E%E5%8F%8D%E5%B0%84.html",{"d":"2023-02-04T13:15:39.000Z","e":"<h1> 代理与反射</h1>\n<p>ES6新增的代理和反射为开发者提供了拦截并向基本操作嵌入额外行为的能力。</p>\n<blockquote>\n<p>在ES6之前，ECMAScript中并没有类似代理的特性。由于代理是一种新的基础性语言能力，很多转译程序都不能把代理行为装换为之前的ECMAScript代码。<u>因此，代理和反射只能在百分百支持它们的平台上使用</u></p>\n</blockquote>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><pre class=\"language-javascript\"><code><span class=\"token keyword\">const</span> target <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token string\">'target'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> handler <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> proxy <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//id属性会访问同一个值,修改目标值 会反映在na'ge</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// target</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>proxy<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// target</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":3.47,"words":1041},"y":"a","t":"代理与反射","I":1},["/posts/JavaScipt基础/红宝书/代理与反射.html","/posts/JavaScipt%E5%9F%BA%E7%A1%80/%E7%BA%A2%E5%AE%9D%E4%B9%A6/%E4%BB%A3%E7%90%86%E4%B8%8E%E5%8F%8D%E5%B0%84","/posts/JavaScipt基础/红宝书/代理与反射.md","/posts/JavaScipt%E5%9F%BA%E7%A1%80/%E7%BA%A2%E5%AE%9D%E4%B9%A6/%E4%BB%A3%E7%90%86%E4%B8%8E%E5%8F%8D%E5%B0%84.md"]],
  ["v-62407bf4","/posts/JavaScipt%E5%9F%BA%E7%A1%80/%E7%BA%A2%E5%AE%9D%E4%B9%A6/%E5%8D%81%E5%9B%9B%E7%AB%A014.3%20MutationObServer%E6%8E%A5%E5%8F%A3.html",{"d":"2023-02-04T13:15:39.000Z","e":"<h1> 今天拜读了红宝书 Dom的14.2.4、14.3章节</h1>\n<h2> 14.2.4 Nodelist</h2>\n<p>本节点提到，理解nodelist对象和相关的NamedNodeMap、HTMLCollection，是理解DOM的关键。我一看这还了得，赶紧打起精神来，结果翻到下一页，就介绍了一页的篇幅...\n主要是介绍，nodelist是实时变化的，它始终展示最新的状态。例子：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><pre class=\"language-javascript\"><code><span class=\"token keyword\">let</span> divs <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementByTagName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> divs<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">let</span> div <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>div<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 这段代码会陷入死循环，因为Nodelist是基于DOM文档的实时查询</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":4.62,"words":1387},"y":"a","t":"今天拜读了红宝书 Dom的14.2.4、14.3章节","I":1},["/posts/JavaScipt基础/红宝书/十四章14.3 MutationObServer接口.html","/posts/JavaScipt%E5%9F%BA%E7%A1%80/%E7%BA%A2%E5%AE%9D%E4%B9%A6/%E5%8D%81%E5%9B%9B%E7%AB%A014.3%20MutationObServer%E6%8E%A5%E5%8F%A3","/posts/JavaScipt基础/红宝书/十四章14.3 MutationObServer接口.md","/posts/JavaScipt%E5%9F%BA%E7%A1%80/%E7%BA%A2%E5%AE%9D%E4%B9%A6/%E5%8D%81%E5%9B%9B%E7%AB%A014.3%20MutationObServer%E6%8E%A5%E5%8F%A3.md"]],
  ["v-fb4efdd4","/posts/JavaScipt%E5%9F%BA%E7%A1%80/%E7%BA%A2%E5%AE%9D%E4%B9%A6/%E5%8F%98%E9%87%8F.html",{"d":"2023-02-04T13:15:39.000Z","e":"<h2> 声明变量的三个关键字：var、let、const</h2>\n<h2> var</h2>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><pre class=\"language-javascript\"><code><span class=\"token comment\">// 函数级作用域</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">var</span> msg <span class=\"token operator\">=</span> <span class=\"token string\">'123'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">123</span>\nmsg\n<span class=\"token comment\">// undefined异常</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":1.46,"words":437},"y":"a","t":"","I":1},["/posts/JavaScipt基础/红宝书/变量.html","/posts/JavaScipt%E5%9F%BA%E7%A1%80/%E7%BA%A2%E5%AE%9D%E4%B9%A6/%E5%8F%98%E9%87%8F","/posts/JavaScipt基础/红宝书/变量.md","/posts/JavaScipt%E5%9F%BA%E7%A1%80/%E7%BA%A2%E5%AE%9D%E4%B9%A6/%E5%8F%98%E9%87%8F.md"]],
  ["v-42a677d8","/posts/JavaScipt%E5%9F%BA%E7%A1%80/%E7%BA%A2%E5%AE%9D%E4%B9%A6/%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87%E4%B8%8E%E4%BD%9C%E7%94%A8%E5%9F%9F.html",{"d":"2023-02-04T13:15:39.000Z","e":"<h3> 上下文</h3>\n<p>上下文之间的连接是线性的、有序的。每个上下文都可以到上一级上下文中去搜索变量和函数，但是不能到下一级去搜索。有点像事件冒泡，一层一层往上。</p>\n<h3> 作用域链增强</h3>\n<ul>\n<li>\n<p>tyr/catch 中的catch块</p>\n</li>\n<li>\n<p>with语句</p>\n<p>这两种情况下，会在作用域链前端加一个变量对象</p>\n</li>\n</ul>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><pre class=\"language-javascript\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">buildUrl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> qs <span class=\"token operator\">=</span> <span class=\"token string\">\"?debug=true\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">with</span><span class=\"token punctuation\">(</span>location<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> url <span class=\"token operator\">=</span> href <span class=\"token operator\">+</span> qs<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> url<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":0.39,"words":117},"y":"a","t":"","I":1},["/posts/JavaScipt基础/红宝书/执行上下文与作用域.html","/posts/JavaScipt%E5%9F%BA%E7%A1%80/%E7%BA%A2%E5%AE%9D%E4%B9%A6/%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87%E4%B8%8E%E4%BD%9C%E7%94%A8%E5%9F%9F","/posts/JavaScipt基础/红宝书/执行上下文与作用域.md","/posts/JavaScipt%E5%9F%BA%E7%A1%80/%E7%BA%A2%E5%AE%9D%E4%B9%A6/%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87%E4%B8%8E%E4%BD%9C%E7%94%A8%E5%9F%9F.md"]],
  ["v-d9e213d4","/posts/JavaScipt%E5%9F%BA%E7%A1%80/%E7%BA%A2%E5%AE%9D%E4%B9%A6/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%20%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%A3%80%E6%B5%8B%2013.3%20%E8%BD%AF%E4%BB%B6%E4%B8%8E%E7%A1%AC%E4%BB%B6%E6%A3%80%E6%B5%8B%EF%BC%88%E6%9C%AC%E7%AB%A0%E5%AE%8C%EF%BC%89.html",{"d":"2023-02-04T13:15:39.000Z","e":"<p>前两节提到的特性检测和用户代理检测是两种常用的识别浏览器方式。而navigator和screen对象也提供了对页面所在软件环境的信息。</p>\n<h2> navigator</h2>\n<h3> navigator.oscpu</h3>\n<p>这个字段返回了操作系统、系统架构相关信息</p>\n<h3> navigator.vendor</h3>\n<p>返回浏览器的开发商信息</p>\n<h3> navigator.platform</h3>\n<p>返回一个表示浏览器所在操作系统的字符串</p>\n<h2> screen</h2>\n<p>属性不常用，可以获取显示器每像素颜色位深、屏幕角度等</p>","r":{"minutes":1.4,"words":419},"y":"a","t":"","I":1},["/posts/JavaScipt基础/红宝书/第十三章 客户端检测 13.3 软件与硬件检测（本章完）.html","/posts/JavaScipt%E5%9F%BA%E7%A1%80/%E7%BA%A2%E5%AE%9D%E4%B9%A6/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%20%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%A3%80%E6%B5%8B%2013.3%20%E8%BD%AF%E4%BB%B6%E4%B8%8E%E7%A1%AC%E4%BB%B6%E6%A3%80%E6%B5%8B%EF%BC%88%E6%9C%AC%E7%AB%A0%E5%AE%8C%EF%BC%89","/posts/JavaScipt基础/红宝书/第十三章 客户端检测 13.3 软件与硬件检测（本章完）.md","/posts/JavaScipt%E5%9F%BA%E7%A1%80/%E7%BA%A2%E5%AE%9D%E4%B9%A6/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%20%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%A3%80%E6%B5%8B%2013.3%20%E8%BD%AF%E4%BB%B6%E4%B8%8E%E7%A1%AC%E4%BB%B6%E6%A3%80%E6%B5%8B%EF%BC%88%E6%9C%AC%E7%AB%A0%E5%AE%8C%EF%BC%89.md"]],
  ["v-e23fa3cc","/posts/JavaScipt%E5%9F%BA%E7%A1%80/%E7%BA%A2%E5%AE%9D%E4%B9%A6/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0BOM12.1.1-6.html",{"d":"2023-02-04T13:15:39.000Z","e":"<h1> 概念</h1>\n<p>BOM是浏览器对象模型，核心是window对象，表示浏览器的实例。</p>\n<h2> Global作用域</h2>\n<p>用var声明的变量和方法会自动声明到全局作用域，let和const不行</p>\n<h2> 窗口关系和位置</h2>\n<p><code>top</code>始终指向最上层的窗口，即浏览器窗口本身。而<code>parent</code>对象始终指向当前窗口的父窗口，如果当前窗口是最上层窗口，则parent等于top（等于window)。\n<code>self</code>对象是终极window对象，它是为了和top、parent保持一致。\n<code>moveTo</code>和<code>moveBy</code>可以移动窗口位置。它们都接受两个参数，表示移动的x和y，单位都是px。前者是移动到新位置的坐标，后者是相对于当前坐标移动多少。</p>","r":{"minutes":2.54,"words":763},"y":"a","t":"概念","I":1},["/posts/JavaScipt基础/红宝书/第十二章BOM12.1.1-6.html","/posts/JavaScipt%E5%9F%BA%E7%A1%80/%E7%BA%A2%E5%AE%9D%E4%B9%A6/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0BOM12.1.1-6","/posts/JavaScipt基础/红宝书/第十二章BOM12.1.1-6.md","/posts/JavaScipt%E5%9F%BA%E7%A1%80/%E7%BA%A2%E5%AE%9D%E4%B9%A6/%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0BOM12.1.1-6.md"]],
  ["v-78000d0c","/posts/JavaScipt%E5%9F%BA%E7%A1%80/%E7%BA%A2%E5%AE%9D%E4%B9%A6/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%2015.1-15.3.html",{"d":"2023-02-04T13:15:39.000Z","e":"<h1> 第十五章 DOM扩展 15.1-15.3</h1>\n<h2> 15.1 Selectors API</h2>\n<p>Selectors API 是 W3C 推荐标准，规定了浏览器原生支持的、通过 CSS 查询 DOM 的 API</p>\n<h3> 15.1.1 querySelector()</h3>\n<p>这个方法可以传入 CSS 选择符参数，例如：</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><pre class=\"language-javascript\"><code><span class=\"token comment\">// 通过标签元素查找</span>\n<span class=\"token keyword\">let</span> body <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'body'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 通过 id 查找</span>\n<span class=\"token keyword\">let</span> myDiv <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#myDiv'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 通过 类名 查找</span>\n<span class=\"token keyword\">let</span> myDiv <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.box'</span><span class=\"token punctuation\">)</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":1.05,"words":315},"y":"a","t":"第十五章 DOM扩展 15.1-15.3","I":1},["/posts/JavaScipt基础/红宝书/第十五章 15.1-15.3.html","/posts/JavaScipt%E5%9F%BA%E7%A1%80/%E7%BA%A2%E5%AE%9D%E4%B9%A6/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%2015.1-15.3","/posts/JavaScipt基础/红宝书/第十五章 15.1-15.3.md","/posts/JavaScipt%E5%9F%BA%E7%A1%80/%E7%BA%A2%E5%AE%9D%E4%B9%A6/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0%2015.1-15.3.md"]],
  ["v-0fc2c1e2","/posts/JavaScipt%E5%9F%BA%E7%A1%80/%E7%BA%A2%E5%AE%9D%E4%B9%A6/%E9%97%AD%E5%8C%85.html",{"d":"2023-02-04T13:15:39.000Z","e":"<h1> 闭包</h1>\n<p><strong>闭包</strong>指的是那些引用了另一个函数作用域中变量的函数，通常是在嵌套函数中实现的。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><pre class=\"language-javascript\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value1<span class=\"token punctuation\">,</span> value2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>value1 <span class=\"token operator\">===</span> value2<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> value1 <span class=\"token operator\">&gt;</span> value2 <span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":1.9,"words":571},"y":"a","t":"闭包","I":1},["/posts/JavaScipt基础/红宝书/闭包.html","/posts/JavaScipt%E5%9F%BA%E7%A1%80/%E7%BA%A2%E5%AE%9D%E4%B9%A6/%E9%97%AD%E5%8C%85","/posts/JavaScipt基础/红宝书/闭包.md","/posts/JavaScipt%E5%9F%BA%E7%A1%80/%E7%BA%A2%E5%AE%9D%E4%B9%A6/%E9%97%AD%E5%8C%85.md"]],
  ["v-0ec8fb2a","/posts/JavaScipt%E5%9F%BA%E7%A1%80/JavaScript%E6%96%B9%E6%B3%95/Array.from%20%E6%96%B9%E6%B3%95%E6%B7%B1%E5%BA%A6%E8%A7%A3%E8%AF%BB.html",{"d":"2023-02-05T03:47:16.000Z","e":"<h1> Array.from 方法深度解读</h1>\n<p>先看下MDN官方介绍:\n<strong>Array.from() 方法从一个类似数组或可迭代对象创建一个新的，浅拷贝的数组实例。</strong>\n创建一个新的、浅拷贝的数组，这里最开始很难理解这句话。“新的”或许代表着深拷贝？ 但是为什么又说是创建浅拷贝呢。\n这里放一段让我对<code>Array.from</code><strong>浅拷贝</strong>疑惑的代码</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><pre class=\"language-javascript\"><code><span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> copyArr <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncopyArr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>copyArr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [8, 2, 3]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [1,2,3]</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":2.45,"words":736},"y":"a","t":"Array.from 方法深度解读","I":1},["/posts/JavaScipt基础/JavaScript方法/Array.from 方法深度解读.html","/posts/JavaScipt%E5%9F%BA%E7%A1%80/JavaScript%E6%96%B9%E6%B3%95/Array.from%20%E6%96%B9%E6%B3%95%E6%B7%B1%E5%BA%A6%E8%A7%A3%E8%AF%BB","/posts/JavaScipt基础/JavaScript方法/Array.from 方法深度解读.md","/posts/JavaScipt%E5%9F%BA%E7%A1%80/JavaScript%E6%96%B9%E6%B3%95/Array.from%20%E6%96%B9%E6%B3%95%E6%B7%B1%E5%BA%A6%E8%A7%A3%E8%AF%BB.md"]],
  ["v-1d9b7dc0","/posts/JavaScipt%E5%9F%BA%E7%A1%80/JavaScript%E6%96%B9%E6%B3%95/JSON%E6%96%B9%E6%B3%95.html",{"d":"2023-02-04T13:15:39.000Z","e":"<h1> JSON方法</h1>\n<p>JSON 是语言无关的纯数据规范，因此一些特定于 JavaScript 的对象属性会被 <code>JSON.stringify</code> 跳过。</p>\n<p>即：</p>\n<ul>\n<li>函数属性（方法）。</li>\n<li>Symbol 类型的属性。</li>\n<li>存储 <code>undefined</code> 的属性。</li>\n</ul>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><pre class=\"language-javascript\"><code><span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 被忽略</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token number\">123</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 被忽略</span>\n  <span class=\"token literal-property property\">something</span><span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span> <span class=\"token comment\">// 被忽略</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {}（空对象）</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":3.03,"words":910},"y":"a","t":"JSON方法","I":1},["/posts/JavaScipt基础/JavaScript方法/JSON方法.html","/posts/JavaScipt%E5%9F%BA%E7%A1%80/JavaScript%E6%96%B9%E6%B3%95/JSON%E6%96%B9%E6%B3%95","/posts/JavaScipt基础/JavaScript方法/JSON方法.md","/posts/JavaScipt%E5%9F%BA%E7%A1%80/JavaScript%E6%96%B9%E6%B3%95/JSON%E6%96%B9%E6%B3%95.md"]],
  ["v-ce4f1900","/posts/JavaScipt%E5%9F%BA%E7%A1%80/JavaScript%E6%96%B9%E6%B3%95/JS%E5%A4%B1%E7%9C%9F%E8%BF%90%E7%AE%97%E7%9A%84%E5%8E%9F%E5%9B%A0.html",{"d":"2023-02-04T13:15:39.000Z","e":"<h1> 关于JS失真运算0.55*100=55.0000001</h1>\n<p><em>今天写业务偶然实现了<code> 0.55*100</code>的代码，结果不尽人意，等于55.0000001</em></p>\n<hr>\n<p>这好吗? 这不好。原因如下：</p>\n<p>在JS中，变量存储没有区分数字型和浮点型，而是统一作为浮点型(float)进行存储，这在很久前学习时有个模糊的印象。\n查阅资料，IEEE 754-2008 标准定义的64bit浮点格式存储number.</p>\n<p>其实JavsScript中，变量在存储时并不区分number和float类型，而是统一按float存储，而javascript使用IEEE 754-2008 标准定义的64bit浮点格式存储number，<code>0.55</code>对应的整形部分长度为0,小数部分长度为16，所以默认的计算结果为“55.0000001”，如最后一个小数为0，则取1作为有效数字标志。类似地，可以想像，1/3的结果应该是0.3333333333333333。</p>","r":{"minutes":0.85,"words":256},"y":"a","t":"关于JS失真运算0.55*100=55.0000001","I":1},["/posts/JavaScipt基础/JavaScript方法/JS失真运算的原因.html","/posts/JavaScipt%E5%9F%BA%E7%A1%80/JavaScript%E6%96%B9%E6%B3%95/JS%E5%A4%B1%E7%9C%9F%E8%BF%90%E7%AE%97%E7%9A%84%E5%8E%9F%E5%9B%A0","/posts/JavaScipt基础/JavaScript方法/JS失真运算的原因.md","/posts/JavaScipt%E5%9F%BA%E7%A1%80/JavaScript%E6%96%B9%E6%B3%95/JS%E5%A4%B1%E7%9C%9F%E8%BF%90%E7%AE%97%E7%9A%84%E5%8E%9F%E5%9B%A0.md"]],
  ["v-e0a87c6e","/posts/JavaScipt%E5%9F%BA%E7%A1%80/JavaScript%E6%96%B9%E6%B3%95/JS%E5%AF%B9%E8%B1%A1%E4%B8%AD%E7%9A%84with%E8%AF%AD%E5%8F%A5.html",{"d":"2023-02-04T13:15:39.000Z","e":"<h1> JS对象中的with语句</h1>\n<p><code>with</code>语句的格式如下：</p>\n<div class=\"language-text line-numbers-mode\" data-ext=\"text\"><pre class=\"language-text\"><code>with (对象) {\n  语句;\n}\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":1.29,"words":388},"y":"a","t":"JS对象中的with语句","I":1},["/posts/JavaScipt基础/JavaScript方法/JS对象中的with语句.html","/posts/JavaScipt%E5%9F%BA%E7%A1%80/JavaScript%E6%96%B9%E6%B3%95/JS%E5%AF%B9%E8%B1%A1%E4%B8%AD%E7%9A%84with%E8%AF%AD%E5%8F%A5","/posts/JavaScipt基础/JavaScript方法/JS对象中的with语句.md","/posts/JavaScipt%E5%9F%BA%E7%A1%80/JavaScript%E6%96%B9%E6%B3%95/JS%E5%AF%B9%E8%B1%A1%E4%B8%AD%E7%9A%84with%E8%AF%AD%E5%8F%A5.md"]],
  ["v-77797307","/posts/JavaScipt%E5%9F%BA%E7%A1%80/JavaScript%E6%96%B9%E6%B3%95/Proxy%E5%92%8CObject.defineProperty%E7%9A%84%E5%8C%BA%E5%88%AB.html",{"d":"2023-02-04T13:15:39.000Z","e":"<h1> Proxy和Object.defineProperty的区别</h1>\n<p><strong>Proxy的优势如下</strong></p>\n<ul>\n<li>Proxy可以直接监听整个对象而非属性。</li>\n<li>Proxy可以直接监听数组的变化。</li>\n<li>Proxy有13中拦截方法，如<code>ownKeys、deleteProperty、has</code> 等是 <code>Object.defineProperty</code> 不具备的。</li>\n<li>Proxy返回的是一个新对象，我们可以只操作新的对象达到目的，而<code>Object.defineProperty</code>只能遍历对象属性直接修改， 性能角度要好;</li>\n<li>Proxy做为新标准将受到浏览器产商重点持续的性能优化,也就是传说中的新标准的性能红利。</li>\n</ul>","r":{"minutes":0.99,"words":297},"y":"a","t":"Proxy和Object.defineProperty的区别","I":1},["/posts/JavaScipt基础/JavaScript方法/Proxy和Object.defineProperty的区别.html","/posts/JavaScipt%E5%9F%BA%E7%A1%80/JavaScript%E6%96%B9%E6%B3%95/Proxy%E5%92%8CObject.defineProperty%E7%9A%84%E5%8C%BA%E5%88%AB","/posts/JavaScipt基础/JavaScript方法/Proxy和Object.defineProperty的区别.md","/posts/JavaScipt%E5%9F%BA%E7%A1%80/JavaScript%E6%96%B9%E6%B3%95/Proxy%E5%92%8CObject.defineProperty%E7%9A%84%E5%8C%BA%E5%88%AB.md"]],
  ["v-2ab47c70","/posts/JavaScipt%E5%9F%BA%E7%A1%80/JavaScript%E6%96%B9%E6%B3%95/async%E7%9A%84%E4%BA%A7%E7%94%9F%EF%BC%8C%E7%94%9F%E6%88%90%E5%99%A8%E7%9B%B8%E5%85%B3%E8%A7%A3%E8%AF%BB.html",{"d":"2023-02-04T13:15:39.000Z","e":"<h1> async的产生，生成器相关解读</h1>\n<p>ES2017 标准引入了 async 函数，使得异步操作变得更加方便。</p>\n<p>async 函数是什么？一句话，它就是 Generator 函数的语法糖。</p>\n<p>关于 Generator 函数，依次读取两个文件。</p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><pre class=\"language-javascript\"><code><span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">readFile</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">fileName</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">gen</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> f1 <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> <span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/etc/fstab'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> f2 <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> <span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/etc/shells'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>f1<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>f2<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":1.79,"words":537},"y":"a","t":"async的产生，生成器相关解读","I":1},["/posts/JavaScipt基础/JavaScript方法/async的产生，生成器相关解读.html","/posts/JavaScipt%E5%9F%BA%E7%A1%80/JavaScript%E6%96%B9%E6%B3%95/async%E7%9A%84%E4%BA%A7%E7%94%9F%EF%BC%8C%E7%94%9F%E6%88%90%E5%99%A8%E7%9B%B8%E5%85%B3%E8%A7%A3%E8%AF%BB","/posts/JavaScipt基础/JavaScript方法/async的产生，生成器相关解读.md","/posts/JavaScipt%E5%9F%BA%E7%A1%80/JavaScript%E6%96%B9%E6%B3%95/async%E7%9A%84%E4%BA%A7%E7%94%9F%EF%BC%8C%E7%94%9F%E6%88%90%E5%99%A8%E7%9B%B8%E5%85%B3%E8%A7%A3%E8%AF%BB.md"]],
  ["v-7b4fe6f4","/posts/%E6%89%8B%E5%86%99%E7%AE%97%E6%B3%95%E7%B3%BB%E5%88%97/%E7%9C%8B%E4%BB%A3%E7%A0%81%E8%AF%B4%E7%BB%93%E6%9E%9C/%E7%9C%8B%E4%BB%A3%E7%A0%81%E8%AF%B4%E7%BB%93%E6%9E%9C%20Promise%E9%A2%98.html",{"d":"2023-02-05T03:47:16.000Z","e":"<h1> 看代码说结果 Promise题</h1>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><pre class=\"language-javascript\"><code><span class=\"token keyword\">const</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span>reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\np<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":0.36,"words":108},"y":"a","t":"看代码说结果 Promise题","I":1},["/posts/手写算法系列/看代码说结果/看代码说结果 Promise题.html","/posts/%E6%89%8B%E5%86%99%E7%AE%97%E6%B3%95%E7%B3%BB%E5%88%97/%E7%9C%8B%E4%BB%A3%E7%A0%81%E8%AF%B4%E7%BB%93%E6%9E%9C/%E7%9C%8B%E4%BB%A3%E7%A0%81%E8%AF%B4%E7%BB%93%E6%9E%9C%20Promise%E9%A2%98","/posts/手写算法系列/看代码说结果/看代码说结果 Promise题.md","/posts/%E6%89%8B%E5%86%99%E7%AE%97%E6%B3%95%E7%B3%BB%E5%88%97/%E7%9C%8B%E4%BB%A3%E7%A0%81%E8%AF%B4%E7%BB%93%E6%9E%9C/%E7%9C%8B%E4%BB%A3%E7%A0%81%E8%AF%B4%E7%BB%93%E6%9E%9C%20Promise%E9%A2%98.md"]],
  ["v-3706649a","/404.html",{"y":"p","t":"","I":1},["/404"]],
  ["v-63514721","/posts/CSS/",{"y":"p","t":"C S S","I":1},["/posts/CSS/index.html"]],
  ["v-e1e3da16","/posts/",{"y":"p","t":"Posts","I":1},["/posts/index.html"]],
  ["v-555c9a72","/posts/Chore/",{"y":"p","t":"Chore","I":1},["/posts/Chore/index.html"]],
  ["v-4c082264","/posts/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/",{"y":"p","t":"前端工程化","I":1},["/posts/前端工程化/","/posts/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/index.html"]],
  ["v-4282cf02","/posts/JS%E8%BF%9B%E9%98%B6-%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/",{"y":"p","t":"J S进阶 源码阅读","I":1},["/posts/JS进阶-源码阅读/","/posts/JS%E8%BF%9B%E9%98%B6-%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/index.html"]],
  ["v-def4f67e","/posts/React%E7%9B%B8%E5%85%B3%E8%A7%A3%E8%AF%BB/",{"y":"p","t":"React相关解读","I":1},["/posts/React相关解读/","/posts/React%E7%9B%B8%E5%85%B3%E8%A7%A3%E8%AF%BB/index.html"]],
  ["v-d07c574c","/posts/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/",{"y":"p","t":"性能优化","I":1},["/posts/性能优化/","/posts/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/index.html"]],
  ["v-5d66c790","/posts/%E6%84%9F%E6%82%9F/",{"y":"p","t":"感悟","I":1},["/posts/感悟/","/posts/%E6%84%9F%E6%82%9F/index.html"]],
  ["v-2f43e305","/posts/%E6%89%8B%E5%86%99%E7%AE%97%E6%B3%95%E7%B3%BB%E5%88%97/",{"y":"p","t":"手写算法系列","I":1},["/posts/手写算法系列/","/posts/%E6%89%8B%E5%86%99%E7%AE%97%E6%B3%95%E7%B3%BB%E5%88%97/index.html"]],
  ["v-0d167dd1","/posts/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/",{"y":"p","t":"浏览器相关知识","I":1},["/posts/浏览器相关知识/","/posts/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/index.html"]],
  ["v-3df4ddc1","/posts/JavaScipt%E5%9F%BA%E7%A1%80/%E7%BA%A2%E5%AE%9D%E4%B9%A6/",{"y":"p","t":"红宝书","I":1},["/posts/JavaScipt基础/红宝书/","/posts/JavaScipt%E5%9F%BA%E7%A1%80/%E7%BA%A2%E5%AE%9D%E4%B9%A6/index.html"]],
  ["v-883e369e","/posts/JavaScipt%E5%9F%BA%E7%A1%80/",{"y":"p","t":"Java Scipt基础","I":1},["/posts/JavaScipt基础/","/posts/JavaScipt%E5%9F%BA%E7%A1%80/index.html"]],
  ["v-896225c0","/posts/JavaScipt%E5%9F%BA%E7%A1%80/JavaScript%E6%96%B9%E6%B3%95/",{"y":"p","t":"Java Script方法","I":1},["/posts/JavaScipt基础/JavaScript方法/","/posts/JavaScipt%E5%9F%BA%E7%A1%80/JavaScript%E6%96%B9%E6%B3%95/index.html"]],
  ["v-3715f198","/posts/%E6%89%8B%E5%86%99%E7%AE%97%E6%B3%95%E7%B3%BB%E5%88%97/%E7%9C%8B%E4%BB%A3%E7%A0%81%E8%AF%B4%E7%BB%93%E6%9E%9C/",{"y":"p","t":"看代码说结果","I":1},["/posts/手写算法系列/看代码说结果/","/posts/%E6%89%8B%E5%86%99%E7%AE%97%E6%B3%95%E7%B3%BB%E5%88%97/%E7%9C%8B%E4%BB%A3%E7%A0%81%E8%AF%B4%E7%BB%93%E6%9E%9C/index.html"]],
  ["v-5bc93818","/category/",{"y":"p","t":"分类","I":1},["/category/index.html"]],
  ["v-744d024e","/tag/",{"y":"p","t":"标签","I":1},["/tag/index.html"]],
  ["v-e52c881c","/article/",{"y":"p","t":"文章","I":1},["/article/index.html"]],
  ["v-154dc4c4","/star/",{"y":"p","t":"收藏","I":1},["/star/index.html"]],
  ["v-01560935","/timeline/",{"y":"p","t":"时间轴","I":1},["/timeline/index.html"]],
]
