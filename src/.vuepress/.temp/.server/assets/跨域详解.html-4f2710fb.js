const data = JSON.parse('{"key":"v-cc5e397e","path":"/posts/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/%E8%B7%A8%E5%9F%9F%E8%AF%A6%E8%A7%A3.html","title":"跨域详解","lang":"zh-CN","frontmatter":{"description":"跨域详解 跨域问题是一道经典的题目了，本文将解读并用代码实现跨域的解决方案。 什么是跨域 跨域是浏览器的一种安全策略（同源策略），它要求一个网址的请求必须有相同的域名、端口和协议，否则无法正常请求，形成“跨域”。 一个域名地址的组成： http:// ⇒ 协议 www. ⇒ 子域名 abc.com ⇒主域名 : 8080 ⇒ 端口号 /script/jquery.js ⇒ 请求资源地址","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/%E8%B7%A8%E5%9F%9F%E8%AF%A6%E8%A7%A3.html"}],["meta",{"property":"og:site_name","content":"饮东的博客"}],["meta",{"property":"og:title","content":"跨域详解"}],["meta",{"property":"og:description","content":"跨域详解 跨域问题是一道经典的题目了，本文将解读并用代码实现跨域的解决方案。 什么是跨域 跨域是浏览器的一种安全策略（同源策略），它要求一个网址的请求必须有相同的域名、端口和协议，否则无法正常请求，形成“跨域”。 一个域名地址的组成： http:// ⇒ 协议 www. ⇒ 子域名 abc.com ⇒主域名 : 8080 ⇒ 端口号 /script/jquery.js ⇒ 请求资源地址"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-02-04T13:15:39.000Z"}],["meta",{"property":"article:modified_time","content":"2023-02-04T13:15:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"跨域详解\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-02-04T13:15:39.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"什么是跨域","slug":"什么是跨域","link":"#什么是跨域","children":[]},{"level":2,"title":"常见的跨域解决方案","slug":"常见的跨域解决方案","link":"#常见的跨域解决方案","children":[{"level":3,"title":"1. JSONP","slug":"_1-jsonp","link":"#_1-jsonp","children":[]},{"level":3,"title":"2.CORS（跨域资源共享）","slug":"_2-cors-跨域资源共享","link":"#_2-cors-跨域资源共享","children":[]},{"level":3,"title":"3.postMessage","slug":"_3-postmessage","link":"#_3-postmessage","children":[]},{"level":3,"title":"4.websocket","slug":"_4-websocket","link":"#_4-websocket","children":[]},{"level":3,"title":"5.Node中间件代理（两次跨域）","slug":"_5-node中间件代理-两次跨域","link":"#_5-node中间件代理-两次跨域","children":[]},{"level":3,"title":"6.nginx反向代理","slug":"_6-nginx反向代理","link":"#_6-nginx反向代理","children":[]},{"level":3,"title":"7.window.name+iframe","slug":"_7-window-name-iframe","link":"#_7-window-name-iframe","children":[]}]}],"git":{"createdTime":1675516539000,"updatedTime":1675516539000,"contributors":[{"name":"yinjindong","email":"yinjindong@newrank.cn","commits":1}]},"readingTime":{"minutes":8.36,"words":2509},"filePathRelative":"posts/浏览器相关知识/跨域详解.md","localizedDate":"2023年2月4日","excerpt":"<h1> 跨域详解</h1>\\n<p>跨域问题是一道经典的题目了，本文将解读并用代码实现跨域的解决方案。</p>\\n<h2> 什么是跨域</h2>\\n<p>跨域是浏览器的一种安全策略（同源策略），它要求一个网址的请求必须有相同的域名、端口和协议，否则无法正常请求，形成“跨域”。</p>\\n<p>一个域名地址的组成：</p>\\n<ul>\\n<li>http://  ⇒ 协议</li>\\n<li>www. ⇒ 子域名</li>\\n<li><a href=\\"http://abc.com\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">abc.com</a> ⇒主域名</li>\\n<li>: 8080 ⇒ 端口号</li>\\n<li>/script/jquery.js ⇒ 请求资源地址</li>\\n</ul>","autoDesc":true}');
export {
  data
};
