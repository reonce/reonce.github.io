const data = JSON.parse('{"key":"v-0a3e262b","path":"/posts/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/%E5%89%8D%E7%AB%AF%E8%B7%AF%E7%94%B1%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%A8%A1%E5%BC%8F.html","title":"前端路由的两种模式： hash 模式和 history 模式","lang":"zh-CN","frontmatter":{"description":"前端路由的两种模式： hash 模式和 history 模式 对于前端来说，hash路由和history路由都可以实现不刷新页面跳转的功能，也就是说都可以用于前后端分离的项目。 hash模式 这里的 hash 就是指 url 尾巴后的 # 号以及后面的字符。这里的 # 和 css 里的 # 是一个意思。hash 也 称作 锚点，本身是用来做页面定位的，她可以使对应 id 的元素显示在可视区域内。 由于 hash 值变化不会导致浏览器向服务器发出请求，而且 hash 改变会触发 hashchange 事件，浏览器的进后退也能对其进行控制，所以人们在 html5 的 history 出现前，基本都是使用 hash 来实现前端路由的。","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/%E5%89%8D%E7%AB%AF%E8%B7%AF%E7%94%B1%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%A8%A1%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"饮东的博客"}],["meta",{"property":"og:title","content":"前端路由的两种模式： hash 模式和 history 模式"}],["meta",{"property":"og:description","content":"前端路由的两种模式： hash 模式和 history 模式 对于前端来说，hash路由和history路由都可以实现不刷新页面跳转的功能，也就是说都可以用于前后端分离的项目。 hash模式 这里的 hash 就是指 url 尾巴后的 # 号以及后面的字符。这里的 # 和 css 里的 # 是一个意思。hash 也 称作 锚点，本身是用来做页面定位的，她可以使对应 id 的元素显示在可视区域内。 由于 hash 值变化不会导致浏览器向服务器发出请求，而且 hash 改变会触发 hashchange 事件，浏览器的进后退也能对其进行控制，所以人们在 html5 的 history 出现前，基本都是使用 hash 来实现前端路由的。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-02-04T13:15:39.000Z"}],["meta",{"property":"article:modified_time","content":"2023-02-04T13:15:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"前端路由的两种模式： hash 模式和 history 模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-02-04T13:15:39.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"hash模式","slug":"hash模式","link":"#hash模式","children":[{"level":3,"title":"hash的特点","slug":"hash的特点","link":"#hash的特点","children":[]}]},{"level":2,"title":"history模式","slug":"history模式","link":"#history模式","children":[{"level":3,"title":"带来哪些新的问题","slug":"带来哪些新的问题","link":"#带来哪些新的问题","children":[]}]}],"git":{"createdTime":1675516539000,"updatedTime":1675516539000,"contributors":[{"name":"yinjindong","email":"yinjindong@newrank.cn","commits":1}]},"readingTime":{"minutes":3.71,"words":1113},"filePathRelative":"posts/前端工程化/前端路由的两种模式.md","localizedDate":"2023年2月4日","excerpt":"<h1> 前端路由的两种模式： hash 模式和 history 模式</h1>\\n<p>对于前端来说，hash路由和history路由都可以实现不刷新页面跳转的功能，也就是说都可以用于前后端分离的项目。</p>\\n<h2> hash模式</h2>\\n<p>这里的 hash 就是指 url 尾巴后的 # 号以及后面的字符。这里的 # 和 css 里的 # 是一个意思。hash 也 称作 锚点，本身是用来做页面定位的，她可以使对应 id 的元素显示在可视区域内。</p>\\n<p>由于 hash 值变化不会导致浏览器向服务器发出请求，而且 hash 改变会触发 hashchange 事件，浏览器的进后退也能对其进行控制，所以人们在 html5 的 history 出现前，基本都是使用 hash 来实现前端路由的。</p>","autoDesc":true}');
export {
  data
};
